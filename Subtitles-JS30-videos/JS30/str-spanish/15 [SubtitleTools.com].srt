1
00:00:00,000 --> 00:00:00,033
Editado en https://subtitletools.com

2
00:00:00,355 --> 00:00:03,355
♪ [música] ♪

3
00:00:07,090 --> 00:00:11,390
Hola. Hola. Hola. Hoy vamos a aprender sobre dos cosas principales.

4
00:00:11,390 --> 00:00:13,960
Primero, vamos a aprender sobre el almacenamiento local y, segundo,

5
00:00:13,960 --> 00:00:17,400
Vamos a aprender sobre algo llamado "delegación de eventos".

6
00:00:17,400 --> 00:00:21,180
Así que lo que tenemos aquí es una especie de menú de tapas, donde puedes agregar cosas,

7
00:00:21,180 --> 00:00:25,330
y luego si los quieres puedes marcarlos y desmarcarlos. Pero el tipo de genial

8
00:00:25,330 --> 00:00:30,330
cosa, si si fueras a escribir como "taco", voy a decir "taco de cerdo",

9
00:00:30,330 --> 00:00:36,230
pulsa Intro, y luego cuando actualizo la página sigue ahí. Si hago clic en uno

10
00:00:36,230 --> 00:00:40,190
de ellos para taco o chequeo, como haría la gente normal, actualizar,

11
00:00:40,190 --> 00:00:44,630
todavía va a estar allí. Así que va a estar persistiendo nuestro estado con

12
00:00:44,630 --> 00:00:48,960
almacenamiento local. A continuación, también vamos a hacer algo llamado "evento

13
00:00:48,960 --> 00:00:55,310
delegación ", porque cuando agrego otro elemento aquí, como pez, y hago clic en él,

14
00:00:55,310 --> 00:01:00,150
Puedo taco de inmediato. ¿Por qué puedo hacer eso? Porque si añades un detector de eventos.

15
00:01:00,150 --> 00:01:05,520
en algo que no existe, sabrás que en el futuro no será

16
00:01:05,520 --> 00:01:10,280
hecho clic Así que vamos a ver ese error también, y usaremos la delegación de eventos para

17
00:01:10,280 --> 00:01:15,450
arreglalo. Así que continué y seleccioné Agregar artículos, que en nuestro caso

18
00:01:15,450 --> 00:01:19,340
es este elemento de forma aquí Así que cuando alguien envía ese formulario,

19
00:01:19,340 --> 00:01:23,630
Vamos a añadir un artículo. Entonces, también he seleccionado este UL con una clase de

20
00:01:23,630 --> 00:01:28,120
"platos" aquí. Ahí es donde vamos a cargar todos nuestros platos de tapas.

21
00:01:28,120 --> 00:01:31,810
Luego, finalmente, vamos a almacenar todos nuestros datos en una matriz.

22
00:01:31,810 --> 00:01:36,270
Va a ser una matriz de objetos, que tiene el nombre de la matriz,

23
00:01:36,270 --> 00:01:40,990
así como el estado, ya sea hecho con taco o hecho, o lo que sea que seamos

24
00:01:40,990 --> 00:01:45,890
aquí. Así que vamos a seguir adelante y tomar ese elemento de formulario, que es Agregar elementos,

25
00:01:45,890 --> 00:01:50,510
Y vamos a escuchar el evento de envío. ¿Por qué escuchamos el envío?

26
00:01:50,510 --> 00:01:54,210
¿aún allí? Porque eso es lo que realmente necesitamos. Muchas veces la gente,

27
00:01:54,210 --> 00:01:58,670
Escuchan un clic en este botón. Pero quieres escuchar un envío,

28
00:01:58,670 --> 00:02:02,900
cuando alguien pulsa Intro, cuando alguien hace clic en un botón, cuando algo externo

29
00:02:02,900 --> 00:02:06,040
lo envía Necesitamos asegurarnos de que estamos cubriendo todas nuestras bases,

30
00:02:06,040 --> 00:02:14,080
y al escuchar el evento de envío, cubrimos todas nuestras bases con eso.

31
00:02:14,080 --> 00:02:19,070
Así que vamos a ejecutar una función llamada "addItem" cuando alguien la envíe,

32
00:02:19,070 --> 00:02:23,260
Y vamos a crear esa función aquí. Nos va a dar el evento,

33
00:02:23,260 --> 00:02:28,730
y solo consola.log, "Hola". Voy a abrir el mío aquí arriba.

34
00:02:28,730 --> 00:02:34,910
Y aquí voy a ir a la consola. Ahora, cuando escribo algo como "pescado"

35
00:02:34,910 --> 00:02:39,660
ves que, oh, "Hola" se muestra rápidamente allí. Déjame hacerlo de nuevo.

36
00:02:39,660 --> 00:02:43,750
Oh, si haces clic en este botón aquí, Conservar registro, puedes ver lo que está sucediendo

37
00:02:43,750 --> 00:02:50,060
aquí. Voy a presionar Enter, y luego automáticamente registramos "Hola",

38
00:02:50,060 --> 00:02:54,660
y luego vemos "Navegado a" y esta es la URL de donde estoy trabajando aquí.

39
00:02:54,660 --> 00:02:58,490
Entonces, lo que sucede es que nuestra página es realmente refrescante, y no queremos

40
00:02:58,490 --> 00:03:03,240
ese. Entonces, lo que podemos hacer es decir e.preventDefault, y eso va a parar

41
00:03:03,240 --> 00:03:07,080
la página de recarga. Porque por defecto, un formulario solo se va a recargar.

42
00:03:07,080 --> 00:03:12,300
la página o envíe los datos a una fuente externa, generalmente cuál es su servidor.

43
00:03:12,300 --> 00:03:16,320
En este caso, vamos a hacer todo el lado del cliente, así que evite el valor predeterminado de

44
00:03:16,320 --> 00:03:23,550
que suceda Ahora, cuando escribo algo y lo envío, no obtenemos

45
00:03:23,550 --> 00:03:28,960
cualquier cosa. ¿Porqué es eso? Porque no pasa nada. Si fuera a console.log

46
00:03:28,960 --> 00:03:35,550
"hola", una vez más, voy a decir "hola", vemos "hola" en la cosa, pero

47
00:03:35,550 --> 00:03:41,920
la página no se recarga. Bueno. Ahora que tenemos eso, lo que tenemos que hacer es

48
00:03:41,920 --> 00:03:48,920
tomar ese texto de este cuadro y ponerlo en un objeto. Así que en primer lugar,

49
00:03:48,920 --> 00:03:53,730
Vamos a hacer un artículo y ese artículo tendrá dos.

50
00:03:53,730 --> 00:03:57,990
Tendrá texto con el nombre del elemento, y lo reemplazaremos en un segundo.

51
00:03:57,990 --> 00:04:01,430
Va a tener un estado hecho de "falso". Así que por defecto, no va a

52
00:04:01,430 --> 00:04:05,510
ser revisado o tacoed. Ahora, ¿cómo conseguimos este texto aquí? Bien,

53
00:04:05,510 --> 00:04:13,880
podemos hacer esto, "const text =" y primero vamos a tomar este cuadro de entrada,

54
00:04:13,880 --> 00:04:19,820
que tiene un nombre de elemento en él. Entonces podríamos decir "document.querySelector"

55
00:04:19,820 --> 00:04:27,440
pero también podemos hacer "this.querySelector". ¿Por qué podemos hacer eso? "Nombre = elemento"

56
00:04:27,440 --> 00:04:32,360
¿Por qué podemos hacer eso? Eso es porque esta va a ser la forma real.

57
00:04:32,360 --> 00:04:36,770
Esa es toda la etiqueta de formulario, y luego buscaremos algo dentro de esa etiqueta de formulario

58
00:04:36,770 --> 00:04:41,870
que tiene un atributo de nombre de "Elemento". Eso es muy útil si tienes múltiples

59
00:04:41,870 --> 00:04:45,060
formularios en una página. No solo quieres estar seleccionándolo globalmente.

60
00:04:45,060 --> 00:04:49,380
Desea limitar su búsqueda dentro de la única forma con la que estamos trabajando.

61
00:04:49,380 --> 00:04:53,770
Así que tenemos ese texto. Si fuéramos sólo para envolver todo eso entre paréntesis,

62
00:04:53,770 --> 00:04:57,270
Primero se ejecutará y podemos llamar ".value" contra él.

63
00:04:57,270 --> 00:05:00,290
Porque eso nos va a dar la entrada, y luego la entrada tiene una propiedad llamada

64
00:05:00,290 --> 00:05:05,070
"valor", que es lo que el usuario haya escrito en él. Entonces, podemos ir aquí.

65
00:05:05,070 --> 00:05:09,320
Teclee el texto." O si has visto mis videos de ES6, entonces sabes en lugar de decir

66
00:05:09,320 --> 00:05:15,780
"texto: texto", podemos usar la propiedad abreviada de ES6, que es solo "texto".

67
00:05:15,780 --> 00:05:20,770
Así que acabamos de crear este objeto aquí. Vamos a console.log el artículo.

68
00:05:20,770 --> 00:05:24,410
Vayamos a nuestra consola. Vamos a escribir algo como "pescado".

69
00:05:24,410 --> 00:05:28,920
Ahora, cuando lo ejecuto, debería ver un objeto en su consola que tiene un

70
00:05:28,920 --> 00:05:33,010
hecho de "falso" y un texto de lo que el usuario haya puesto allí.

71
00:05:33,010 --> 00:05:35,850
Si lo ejecutas un par de veces, la consola se registrará.

72
00:05:35,850 --> 00:05:39,740
Una cosa que queremos hacer es borrar esa entrada. Lo que podemos hacer es decir.

73
00:05:39,740 --> 00:05:45,280
"this.reset". Porque "este" es el elemento de formulario, y los elementos de formulario tienen un método

74
00:05:45,280 --> 00:05:49,760
llamado "reset" en él. Probablemente te has topado con esto donde has pasado una hora.

75
00:05:49,760 --> 00:05:53,610
completar un formulario en línea en algún lugar, y accidentalmente hace clic en el botón Restablecer

76
00:05:53,610 --> 00:05:59,110
en lugar del botón Enviar. Eso es lo que está conectado es el ".reset".

77
00:05:59,110 --> 00:06:05,210
Así que veamos dónde estamos ahora. "Pescado", ahí vamos. Lo refresca,

78
00:06:05,210 --> 00:06:08,930
aclara eso, y creamos este objeto. No lo estamos viendo,

79
00:06:08,930 --> 00:06:14,860
Porque no estamos en la consola registrándolo. Ahora, lo que queremos hacer es tomar ese elemento aquí

80
00:06:14,860 --> 00:06:19,290
y poner eso en la matriz de este elemento. Entonces, lo que hacemos es simplemente decir

81
00:06:19,290 --> 00:06:27,950
"items.push (item)". Ahora, tomemos un pez y diremos "calamar".

82
00:06:27,950 --> 00:06:32,690
Ahora, si nos fijamos en la matriz de nuestro elemento, verá que tenemos "Objeto" con dos cosas

83
00:06:32,690 --> 00:06:37,750
en eso. Podemos ir un paso más allá y configurar la matriz del elemento.

84
00:06:37,750 --> 00:06:42,750
y ves que tenemos "Peces" y "Calamares". Ahora, eso es todo lo que hemos hecho para conseguir

85
00:06:42,750 --> 00:06:46,760
nuestros datos en ella No va a persistir cuando se actualice todavía.

86
00:06:46,760 --> 00:06:50,380
Lo haremos en un segundo. Pero en este punto, tenemos que crear un segundo

87
00:06:50,380 --> 00:06:54,450
función que vamos a llamar "populateList", y eso va a crear

88
00:06:54,450 --> 00:06:58,190
el HTML real aquí. Así que vamos a decir "function populateList".

89
00:06:58,190 --> 00:07:04,650
Esa función populateList necesita dos cosas. En primer lugar, necesita una lista de

90
00:07:04,650 --> 00:07:08,660
Placas para poblar. Hemos almacenado que donde? Hemos almacenado eso en nuestro artículo

91
00:07:08,660 --> 00:07:13,340
formación. Déjame mostrarte una vez más. Si escribo "pez" y miro la matriz de nuestro artículo,

92
00:07:13,340 --> 00:07:17,730
Usted ve que tenemos una serie de cosas, que tiene un texto de "pez" y listo.

93
00:07:17,730 --> 00:07:22,390
Así que tenemos que pasar lo que se va a llamar, y usted puede llamar a eso "Elementos"

94
00:07:22,390 --> 00:07:27,050
Si prefieres nombrar la variable lo mismo. Pero llamémosle "platos".

95
00:07:27,050 --> 00:07:31,620
y vamos a establecer que sea el valor predeterminado de un objeto vacío.

96
00:07:31,620 --> 00:07:36,170
La razón por la que hago eso es porque si por alguna razón te olvidas de pasar

97
00:07:36,170 --> 00:07:39,900
algo, no va a romper tu JavaScript. Solo va a terminar

98
00:07:39,900 --> 00:07:44,410
una matriz de nada, y luego su función de mapa funcionará bien.

99
00:07:44,410 --> 00:07:49,420
Luego, en segundo lugar, necesitamos un lugar para colocar el HTML y eso se llama "placas

100
00:07:49,420 --> 00:07:55,280
lista. "Vamos a pasar a nuestra lista de artículos. Entonces, ¿por qué estoy haciendo eso?

101
00:07:55,280 --> 00:08:00,250
¿Por qué no me gusta simplemente llegar al exterior y tomar la lista de elementos y

102
00:08:00,250 --> 00:08:03,840
¿Agarrando el lugar donde los tiraremos? Eso es porque quiero esto

103
00:08:03,840 --> 00:08:08,780
La función populateList es un poco más resistente. Lo que significa que podría pasar

104
00:08:08,780 --> 00:08:14,210
en cualquier conjunto de placas y cualquier elemento HTML de destino, y funcionará.

105
00:08:14,210 --> 00:08:19,140
Entonces, si en el futuro decidiera tener dos listas diferentes o dos menús diferentes,

106
00:08:19,140 --> 00:08:23,660
eso estaría bien Todavía podría usar una sola función populateList y simplemente pasar

107
00:08:23,660 --> 00:08:27,880
es una matriz diferente de elementos y un elemento HTML diferente para volcarlo.

108
00:08:27,880 --> 00:08:32,730
Así que entramos aquí y tomamos la matriz de este plato aquí, y vamos a

109
00:08:32,730 --> 00:08:38,850
mapa sobre él Así que llegamos al mapa. Tomamos nuestro artículo, o llamémoslo "plato"

110
00:08:38,850 --> 00:08:43,300
singular, y luego tenemos el índice y les mostraré por qué necesitamos eso en solo un

111
00:08:43,300 --> 00:08:48,630
segundo. Ahora, desde aquí esto va a devolver algo de HTML. Así que vamos a utilizar

112
00:08:48,630 --> 00:08:53,820
texto posterior Lo último que tenemos que hacer es, frente a este plate.map,

113
00:08:53,820 --> 00:08:58,350
Necesitamos pegar esto ya sea en una variable o directamente en el HTML.

114
00:08:58,350 --> 00:09:04,140
Así que voy a decir "lista de placas [eliminado] =" y te mostraré lo que hace esto en

115
00:09:04,140 --> 00:09:09,580
sólo un segundo. Así que vamos a recorrer cada elemento de nuestra matriz,

116
00:09:09,580 --> 00:09:12,960
y eso es solo un objeto y vamos a mapearlo. Que de nuevo,

117
00:09:12,960 --> 00:09:19,710
un mapa tomará una matriz de datos sin procesar y devolverá una matriz de algunos otros datos.

118
00:09:19,710 --> 00:09:24,080
En nuestro caso, vamos a tomar los objetos y devolver una cadena de cada uno.

119
00:09:24,080 --> 00:09:27,120
Es por eso que estamos usando estos textos anteriores aquí. Así que vamos a darnos una

120
00:09:27,120 --> 00:09:34,240
lista de elementos, y luego tomemos una etiqueta y olvidemos todas las

121
00:09:34,240 --> 00:09:39,960
cosas. Vamos a hacerlo funcionar. Pondremos "plate.text" dentro de él.

122
00:09:39,960 --> 00:09:46,810
Entonces, lo último que debemos hacer es llamar a ".join" aquí. Porque el mapa va a

123
00:09:46,810 --> 00:09:51,870
devuelve una matriz, cuando realmente si estamos configurando HTML interno, solo necesitamos una grande

124
00:09:51,870 --> 00:09:57,750
cuerda. Así que este pequeño ".join" al final tomará esta matriz que hace el mapa

125
00:09:57,750 --> 00:10:01,140
y convertirlo en una gran cadena. Así que si tenemos seis o siete artículos,

126
00:10:01,140 --> 00:10:05,240
No nos va a dar una matriz con seis cuerdas. Nos va a dar uno

127
00:10:05,240 --> 00:10:13,430
cadena enorme Así que ahora, si tomamos esta populateList, regresa aquí arriba

128
00:10:13,430 --> 00:10:19,610
antes de ejecutarlo, y ejecutamos populateList. Vamos a pasarle nuestra lista de artículos.

129
00:10:19,610 --> 00:10:24,390
y nuestra lista de artículos. Vamos a probarlo. Así que si escribo "pez", aha,

130
00:10:24,390 --> 00:10:31,600
"pescado" y "calamar" y "tacos", y verás que lo que está sucediendo aquí es que cada

131
00:10:31,600 --> 00:10:36,550
Cuando agregamos un elemento, estamos llamando a esta función populateList,

132
00:10:36,550 --> 00:10:41,910
que luego va a crear un elemento de lista con una etiqueta dentro de él.

133
00:10:41,910 --> 00:10:46,470
Puedes inspeccionar esto y ver lo que estamos haciendo aquí. Va a crear un

134
00:10:46,470 --> 00:10:50,110
elemento de la lista. Una cosa que debo decir es esta función de lista de datos,

135
00:10:50,110 --> 00:10:55,960
Cada vez que agregamos un artículo, está recreando la lista completa. Así que si eres realmente

136
00:10:55,960 --> 00:10:59,530
preocupado por el rendimiento, en este caso no es un gran problema. Es muy,

137
00:10:59,530 --> 00:11:05,800
muy rapido. Pero si estuvieras haciendo esto tal vez cada medio segundo o cada segundo,

138
00:11:05,800 --> 00:11:10,170
o tenías un montón de animaciones, querrías mirar, "¿Cómo actualizo?

139
00:11:10,170 --> 00:11:15,070
sólo ese elemento de la lista que tengo, en lugar de volver a enviar la lista completa?

140
00:11:15,070 --> 00:11:18,790
Ahí es donde algo como Reaccionar o Angular se vuelve realmente útil,

141
00:11:18,790 --> 00:11:22,500
porque son lo suficientemente inteligentes como para saber, "Está bien. En lugar de simplemente soplar esto

142
00:11:22,500 --> 00:11:27,630
toda la lista desordenada y volver a enviar todo el asunto, déjame averiguar qué es

143
00:11:27,630 --> 00:11:33,490
el HTML mínimo que necesito cambiar en la página sin tener que cambiar el resto

144
00:11:33,490 --> 00:11:38,340
de eso Así que tenemos esta etiqueta aquí, y encima de ella voy a tener una entrada con

145
00:11:38,340 --> 00:11:44,910
el tipo de casilla de verificación. Necesitamos un "índice de datos", y te mostraré por qué eso es

146
00:11:44,910 --> 00:11:51,760
Útil en pocos minutos. Vamos a establecer eso en el índice que tenemos

147
00:11:51,760 --> 00:12:00,310
aquí. Vamos a tener una identificación, que será el artículo I, porque eso va

148
00:12:00,310 --> 00:12:05,690
para que sea el artículo 1, el artículo 2, el artículo 3, el artículo 4. Aquí debemos volver a nuestra etiqueta y

149
00:12:05,690 --> 00:12:12,040
enganchar esa identificación. Así que diremos "Artículo I", y así es como cuando haces clic en la etiqueta

150
00:12:12,040 --> 00:12:16,920
la entrada se verificará a sí misma. Así es como unimos los dos. La identificación y el "para" son

151
00:12:16,920 --> 00:12:22,060
exactamente lo mismo Entonces, finalmente, necesitamos saber si estos elementos

152
00:12:22,060 --> 00:12:26,700
Se van a comprobar o no. Porque cuando lo reenvío, si ya está

153
00:12:26,700 --> 00:12:30,730
verificado, si tiene un estado Finalizado, debemos poner el atributo "verificado".

154
00:12:30,730 --> 00:12:37,330
Así que si tuviera que decir "revisado", todos ellos serían revisados ​​automáticamente.

155
00:12:37,330 --> 00:12:47,480
Entonces, si agrego "pescado", ¿veo que tiene un estado "marcado"? Pero hay que mirar

156
00:12:47,480 --> 00:12:52,810
los elementos allí, y el primero tiene una propiedad de "hecho".

157
00:12:52,810 --> 00:12:57,060
Entonces, si tiene una propiedad de "hecho", ponga el atributo "verificado".

158
00:12:57,060 --> 00:13:00,060
De lo contrario, lo dejamos fuera. Porque puedes saber que no puedes decir

159
00:13:00,060 --> 00:13:05,210
"marcado = falso". Eso todavía lo hará ... Mira. Si digo "marcado = falso" y

160
00:13:05,210 --> 00:13:13,420
Escribo "pescado", todavía lo comprueba. Si digo "marcada = caca de emoji"

161
00:13:13,420 --> 00:13:17,980
todavía está revisado Eso es porque todo, cualquier existencia de la propiedad.

162
00:13:17,980 --> 00:13:24,180
revisado o el atributo comprobado lo hará comprobar. Así que tenemos que crear un tornería

163
00:13:24,180 --> 00:13:29,810
operador aquí, donde decimos si el atributo "plate.done" es verdadero,

164
00:13:29,810 --> 00:13:34,600
Entonces vamos a poner el comprobado. De lo contrario, no vamos a hacer nada.

165
00:13:34,600 --> 00:13:38,800
Es sólo una cadena vacía. A veces pensaba poner "nulo" aquí.

166
00:13:38,800 --> 00:13:43,990
Pero la palabra "nula" aparecerá en tu HTML. Así que necesitas dos en blanco

167
00:13:43,990 --> 00:13:48,910
instrumentos de cuerda. A ver si algo está roto. Bueno. "Pescado" está funcionando.

168
00:13:48,910 --> 00:13:52,150
Luego, cuando hago clic en él, se activará y desactivará el taco. Si te estas preguntando como yo

169
00:13:52,150 --> 00:13:56,780
hizo esto aquí, si echa un vistazo al cuadro de entrada,

170
00:13:56,780 --> 00:14:00,850
verá que he mostrado "ninguno". Si me quito eso, el cuadro de entrada es en realidad

171
00:14:00,850 --> 00:14:07,460
aún allí. Acabo de ocultarlo con CSS. Si abrimos nuestro CSS aquí,

172
00:14:07,460 --> 00:14:13,980
vamos a buscar los tacos, aquí vamos, lo que decimos es la entrada de la placa,

173
00:14:13,980 --> 00:14:19,790
la etiqueta delante de ella, tiene una especie de emoji en blanco que es solo un cuadrado,

174
00:14:19,790 --> 00:14:25,140
pero luego, cuando se marca la entrada, convierta ese contenido de un cuadrado en blanco en un

175
00:14:25,140 --> 00:14:29,830
taco Así que realmente podrías poner lo que quisieras aquí, y lo encenderá y

176
00:14:29,830 --> 00:14:33,860
apagado. Es una especie de truco que puedes hacer para que funcione.

177
00:14:33,860 --> 00:14:37,340
Creo que se ve un poco mejor, y esa es una manera en la que aún puedes tener tu

178
00:14:37,340 --> 00:14:42,890
casilla de verificación adecuada para los datos. Pero puedes mostrarlos con cualquier HTML o CSS

179
00:14:42,890 --> 00:14:48,440
eso que quieres. Así que tenemos eso en marcha. Cada vez que agrego un nuevo artículo

180
00:14:48,440 --> 00:14:55,510
lo agregaré a la lista, y puedo marcarlo y desmarcarlo. El otro problema aqui

181
00:14:55,510 --> 00:15:02,300
Es que cuando actualizo la página, esa lista no persiste. Entonces, ¿qué vamos a

182
00:15:02,300 --> 00:15:06,220
Lo que debemos hacer es almacenar nuestros datos en el almacenamiento local. Ahora,

183
00:15:06,220 --> 00:15:10,760
Si nunca antes has trabajado con almacenamiento local, esencialmente cómo funciona es que

184
00:15:10,760 --> 00:15:16,010
Tienes este objeto en el navegador llamado "Almacenamiento local". Si abres eso,

185
00:15:16,010 --> 00:15:24,180
Esto es solo una lista de cosas que se han guardado en este dominio.

186
00:15:24,180 --> 00:15:29,320
Así que esto es solo una computadora por computadora, navegador por navegador, sitio web por sitio web

187
00:15:29,320 --> 00:15:34,210
base. Pero puedes guardar texto en el navegador y luego cuando recargas la página

188
00:15:34,210 --> 00:15:38,300
Podrás sacar este texto de ahí. Así que si vas a la pestaña de tu aplicación

189
00:15:38,300 --> 00:15:42,230
En Chrome Dev Tools, hay un montón de cosas aquí. Si vas a almacenamiento local

190
00:15:42,230 --> 00:15:45,430
y haces clic en el dominio en el que estás trabajando, en este caso estoy trabajando

191
00:15:45,430 --> 00:15:50,500
localmente, así que solo es "archivo", debería ver que hay una clave de elementos y una

192
00:15:50,500 --> 00:15:53,550
Valor de otra cosa. Ahora, puedes ver un montón de otras cosas aquí,

193
00:15:53,550 --> 00:15:57,980
dependiendo de si alguna vez has ejecutado otras aplicaciones en tu host local.

194
00:15:57,980 --> 00:16:04,440
Aquí es donde he almacenado el texto de lo que buscamos y la propiedad de hecho.

195
00:16:04,440 --> 00:16:11,560
a "falso" o "verdadero", etc., etc. Entonces, ¿cómo guardamos eso en el almacenamiento local?

196
00:16:11,560 --> 00:16:16,640
o hecho? Bueno, en realidad es bastante fácil. Cuando rellenamos la lista aquí,

197
00:16:16,640 --> 00:16:21,500
lo que también necesitamos hacer es configurar la matriz de este elemento en el almacenamiento local.

198
00:16:21,500 --> 00:16:26,000
Entonces, crees que podrías hacer esto, localStorage. , y luego la API es

199
00:16:26,000 --> 00:16:32,770
.setItem, .getItem y .removeItem o deleteItem. Voy a comprobar eso

200
00:16:32,770 --> 00:16:36,910
Así que localStorage.setItem, y luego vamos a establecer el elemento,

201
00:16:36,910 --> 00:16:41,170
"Artículos." Esa es la clave aquí, cómo se va a llamar.

202
00:16:41,170 --> 00:16:44,050
Entonces, ¿a qué vas a configurar los datos? Bueno, usted podría pensar,

203
00:16:44,050 --> 00:16:48,430
"Está bien. Solo pasaré elementos, porque esa es mi matriz de elementos". "Pez."

204
00:16:48,430 --> 00:16:52,470
Bueno. Así que simplemente lo ejecutamos. Recolectamos el ítem, poblamos la lista,

205
00:16:52,470 --> 00:16:55,400
y luego llamamos "localStorage.setItems". Vamos a nuestro

206
00:16:55,400 --> 00:17:02,450
almacenamiento local aquí, y ves esto, "objeto Objeto". Qué significa eso?

207
00:17:02,450 --> 00:17:06,990
Bueno, lo que está pasando aquí es ese almacenamiento local, aunque parece que es un

208
00:17:06,990 --> 00:17:14,250
objeto, es simplemente un almacén de valores clave y solo puede utilizar cadenas en local

209
00:17:14,250 --> 00:17:20,390
almacenamiento. Así que si tuviéramos que llevar nuestros artículos aquí y llamar ".toString",

210
00:17:20,390 --> 00:17:25,460
ves "objeto objeto". Lo que pasa es que cuando intentas poner algo

211
00:17:25,460 --> 00:17:29,540
aparte de una cadena en el almacenamiento local, el navegador dice: "Oh,

212
00:17:29,540 --> 00:17:33,360
No sé cómo manejar esto. Déjame simplemente convertirlo en una cadena,

213
00:17:33,360 --> 00:17:38,580
y permítanme usar el método .toString que existe en el número o el objeto,

214
00:17:38,580 --> 00:17:42,660
o la matriz. "En nuestro caso, es una matriz. Lo que devuelve es que el navegador funciona,

215
00:17:42,660 --> 00:17:47,380
"Objeto objeto" y esa es su representación. Así que realmente no podemos hacer

216
00:17:47,380 --> 00:17:51,520
eso, porque en realidad no hay un objeto aquí. Es solo la palabra "objeto".

217
00:17:51,520 --> 00:17:58,310
Objeto ". Entonces, lo que realmente necesitamos hacer es estratificarlo antes de convertirlo.

218
00:17:58,310 --> 00:18:02,120
Así que en el navegador, tenemos esta cosa llamada "JSON.stringify" y cuando pasas

219
00:18:02,120 --> 00:18:08,770
En tus artículos, va a convertir tus objetos y matrices en una cadena JSON

220
00:18:08,770 --> 00:18:14,040
equivalente. Así que solo necesitamos envolver este lechón. Usted envía "parse (elementos),"

221
00:18:14,040 --> 00:18:23,630
y ahora, cuando agrega un elemento aquí, "fish", oh, "token inesperado en JSON".

222
00:18:23,630 --> 00:18:28,240
¿Cuál es nuestro problema? Oh, no estamos analizados. JSON.stringify. Parsed va a ser el

223
00:18:28,240 --> 00:18:38,090
Otra manera. "Pescado" y "tacos" y "mmm", y ahora cuando vaya a su aplicación

224
00:18:38,090 --> 00:18:42,730
pestaña aquí, ves que esto ahora está siendo almacenado. Parece una serie de objetos,

225
00:18:42,730 --> 00:18:46,440
Pero en realidad es solo texto. Te lo puedo mostrar, porque podemos decir

226
00:18:46,440 --> 00:18:53,380
"localStorage.getItem ('elementos')." Eso es sólo una cadena. Sin embargo,

227
00:18:53,380 --> 00:18:59,120
lo que puede hacer es envolver esa cosa en JSON.parse y eso es lo que va a hacer

228
00:18:59,120 --> 00:19:03,510
Sácalo de la cuerda y ponlo de nuevo en lo que fuera inicialmente.

229
00:19:03,510 --> 00:19:08,810
En este caso, será una matriz de objetos reales. Así que eso es lo que necesitamos

230
00:19:08,810 --> 00:19:16,330
hacer en la página de carga. Bajamos aquí y cuando la página se carga, lo último,

231
00:19:16,330 --> 00:19:23,260
diremos "populateList" y podremos decir "elementos". Pero una vez más, no lo sabes.

232
00:19:23,260 --> 00:19:27,870
¿Tenemos que hacer JSON.parse? No, aquí no. Vamos a decir "artículos" y

233
00:19:27,870 --> 00:19:33,400
"itemsList". Pero los "elementos" no existen en la carga de la página. Recuerda,

234
00:19:33,400 --> 00:19:38,460
¿Lo primero que hacemos aquí es crear un objeto vacío? Entonces lo que podemos hacer es nosotros

235
00:19:38,460 --> 00:19:43,390
puede decir "items = JSON.parse (localStorage.getItem ('items'))

236
00:19:43,390 --> 00:19:51,360
o una matriz en blanco. Lo que hará es intentar obtenerlo de los locales.

237
00:19:51,360 --> 00:19:59,000
almacenamiento, y luego, si no está allí, volverá a una matriz vacía.

238
00:19:59,000 --> 00:20:02,950
Luego, en la carga de la página, antes de que hagamos algo de esto, nuestros Artículos serán

239
00:20:02,950 --> 00:20:09,100
poblado, y luego, cuando llegamos aquí, podemos llamar a nuestra "populateList" tal como lo hicimos

240
00:20:09,100 --> 00:20:15,530
aquí. Así que si refrescamos la página ahora, oh-ho, ves que nuestro "pez"

241
00:20:15,530 --> 00:20:20,260
"tacos" y "yum" ahora persisten. Puedo refrescar todo lo que quiera,

242
00:20:20,260 --> 00:20:25,710
Y los datos siempre estarán ahí. Así que una revisión rápida real de lo que acabamos de hacer

243
00:20:25,710 --> 00:20:30,240
ahí. Cuando agregamos un artículo, lo pone en el almacenamiento local y actualiza su

244
00:20:30,240 --> 00:20:36,790
Almacenamiento local cada vez. Luego, en la carga de la página, lo que va a pasar es que

245
00:20:36,790 --> 00:20:41,650
comprobamos si hay algo en el almacenamiento local, y luego volvemos a un vacío

246
00:20:41,650 --> 00:20:44,660
formación. Ahora, solo quiero asegurarme de que eso todavía funciona con nada.

247
00:20:44,660 --> 00:20:49,240
Así que podemos ir a nuestra aplicación, Archivo, hacer clic en esta cosa y salir.

248
00:20:49,240 --> 00:20:54,230
Luego, cuando actualizamos la página, ves que no hay nada allí.

249
00:20:54,230 --> 00:20:59,110
Así que si escribo "elementos", verás que ha vuelto a este corchete,

250
00:20:59,110 --> 00:21:03,840
que es una matriz en blanco. Bueno. Bueno. Bueno. Bueno. Estamos en buena forma.

251
00:21:03,840 --> 00:21:09,290
A continuación, lo que tenemos que hacer es persistir en su conmutación. Porque si añades

252
00:21:09,290 --> 00:21:16,390
"pescado" y "tacos" y "mmm", y marca uno y actualiza la página,

253
00:21:16,390 --> 00:21:24,450
ese estado ya no se maneja. Entonces, lo que necesitamos hacer es crear una nueva función.

254
00:21:24,450 --> 00:21:29,520
se llama "toggleDone" y luego vamos a pasar el evento allí.

255
00:21:29,520 --> 00:21:36,000
Ahora, ¿cuándo se ejecutará esta función? Vayamos aquí abajo. Piensas que seleccionarías

256
00:21:36,000 --> 00:21:41,440
cada una de las casillas de verificación aquí mismo, y luego escuche un cambio o un clic

257
00:21:41,440 --> 00:21:48,250
evento en esas casillas de verificación. Entonces, cuando eso suceda, seguirás adelante y actuarás.

258
00:21:48,250 --> 00:21:53,690
alguna cosa. Ahora, déjame mostrarte un ejemplo realmente rápido. Si digo "const checkBoxes"

259
00:21:53,690 --> 00:21:58,610
= document.querySelectorAll, y solo voy a seleccionar cada entrada en la página,

260
00:21:58,610 --> 00:22:05,320
y diré checkBoxes.forEach (input => input.addEventListener ('click' ".

261
00:22:05,320 --> 00:22:11,330
Luego, cuando eso se ejecuta, voy a ejecutar una función rápida aquí,

262
00:22:11,330 --> 00:22:18,710
Eso me alertará. De acuerdo. Lo que hice allí, cuando hago clic en una casilla de verificación,

263
00:22:18,710 --> 00:22:22,420
debemos alertar "hola". Así que haz clic en él, y cuando hago clic en uno de ellos,

264
00:22:22,420 --> 00:22:29,800
mostramos alerta "hola", pero no está funcionando. Hmm, ¿qué está pasando aquí?

265
00:22:29,800 --> 00:22:37,430
Bueno, si miramos nuestra matriz de casillas de verificación, hay dos cosas allí y es esto

266
00:22:37,430 --> 00:22:42,150
cosa. Bueno. Así que cuando hago clic en eso, eso funciona. Cuando hacemos clic en Agregar elemento,

267
00:22:42,150 --> 00:22:47,700
eso funciona. Entonces, ¿dónde están estas tres entradas? ¿Por qué no aparecen en mi

268
00:22:47,700 --> 00:22:53,770
lista de notas? El problema que hemos encontrado aquí es que cuando se ejecuta este código,

269
00:22:53,770 --> 00:22:58,470
cuando nuestro detector de eventos se ejecuta, cuando nuestro selector se ejecuta, esto todavía no existe.

270
00:22:58,470 --> 00:23:01,790
¿Por qué? Porque necesitamos rellenar la lista primero. Así que puedes pensar,

271
00:23:01,790 --> 00:23:06,870
"Está bien. Está bien. Primero llenemos la lista y echemos un vistazo a nuestra

272
00:23:06,870 --> 00:23:11,880
matriz de casillas de verificación. "De acuerdo. Míralo. Hay más. Ahí están.

273
00:23:11,880 --> 00:23:15,650
Bueno. Estamos fuera? Ahora, si hago clic en uno de estos, está bien, ahora está funcionando.

274
00:23:15,650 --> 00:23:22,270
Pero, ¿qué pasa si agrego un elemento adicional como aquí? "Hola."

275
00:23:22,270 --> 00:23:25,530
Lo agrega. Ok bueno Ahora, voy a hacer clic en esta casilla de verificación.

276
00:23:25,530 --> 00:23:34,300
No funciona ¿Funciona "yum"? No. Ninguno de estos trabaja ahora.

277
00:23:34,300 --> 00:23:40,050
Lo que está sucediendo es porque estas entradas aquí se crean después de que las escuchamos,

278
00:23:40,050 --> 00:23:44,280
no tienen oyentes de eventos adjuntos a ellos. La idea detrás del evento.

279
00:23:44,280 --> 00:23:48,830
delegación es más que escuchar un clic o un cambio en estas casillas de verificación

280
00:23:48,830 --> 00:23:55,120
directamente, lo que hacemos es buscar a alguien que va a estar en la página en

281
00:23:55,120 --> 00:24:00,250
El tiempo de la escucha. Si miramos nuestro HTML aquí, verán que eso

282
00:24:00,250 --> 00:24:05,140
lista desordenada que contiene todo, UL con una clase de "placas"

283
00:24:05,140 --> 00:24:09,600
que existe Entonces, lo que vamos a hacer es escuchar un clic en

284
00:24:09,600 --> 00:24:13,430
las placas, y luego vamos a averiguar, "¿Realmente querían hacer clic en uno

285
00:24:13,430 --> 00:24:18,050
de las entradas dentro de él? "Así que siempre me gusta pensar en la delegación de eventos como muy

286
00:24:18,050 --> 00:24:23,680
Padres responsables, como UL con una clase de "platos" y niños muy negligentes.

287
00:24:23,680 --> 00:24:28,760
Que no necesariamente escuchan instrucciones de los padres. Y qué

288
00:24:28,760 --> 00:24:33,510
lo que decimos es "Hey, platos. Cuando se hace clic en las entradas de tus hijos,

289
00:24:33,510 --> 00:24:38,790
¿Puede pasar este clic a ellos? "En lugar de manejar el clic

290
00:24:38,790 --> 00:24:43,240
directamente, solo te lo decimos porque eres el único responsable aquí.

291
00:24:43,240 --> 00:24:46,290
Para que cuando alguien haga clic, si es para uno de tus hijos,

292
00:24:46,290 --> 00:24:49,140
No sé si son tus hijos actuales o vas a hacer más.

293
00:24:49,140 --> 00:24:53,040
niños en el futuro, pero si gana más en el futuro, asegúrese de contar

294
00:24:53,040 --> 00:24:57,170
Para manejar este clic. Así que tienes que pensar como, padre responsable,

295
00:24:57,170 --> 00:25:01,020
Niño negligente que no necesariamente sabe qué hacer con el clic.

296
00:25:01,020 --> 00:25:04,440
Así que el padre tiene que decirle qué hacer. Así que volvamos a este código aquí.

297
00:25:04,440 --> 00:25:08,690
Vamos a eliminar estas casillas de verificación aquí si escribes eso. Solo queremos esto

298
00:25:08,690 --> 00:25:15,010
poplist y addItem con ese escucha. Vamos a escuchar el

299
00:25:15,010 --> 00:25:19,900
haga clic en la lista desordenada, que es esta lista de artículos aquí.

300
00:25:19,900 --> 00:25:24,790
Así que diremos, simplemente duplique esto, "itemsList.addEventListener".

301
00:25:24,790 --> 00:25:30,230
Vamos a escuchar un clic. Cuando eso sucede, vamos a "toggleDone".

302
00:25:30,230 --> 00:25:35,850
Luego, dentro de aquí, voy a console.log the E. Volvamos a nuestra

303
00:25:35,850 --> 00:25:42,030
consola aqui Ahora, vamos a hacer clic en uno de estos. UH oh. Bueno. Eso es interesante.

304
00:25:42,030 --> 00:25:45,990
Estamos recibiendo dos controladores de eventos de ratón diferentes. Vamos a hacer clic en este derecho

305
00:25:45,990 --> 00:25:52,860
aquí. Whoa ¿Que está pasando aqui? Así que tenemos dos oyentes de eventos diferentes aquí

306
00:25:52,860 --> 00:25:57,670
cuando hacemos clic en algo Lo que podemos hacer un poco más es si miramos el

307
00:25:57,670 --> 00:26:04,550
objetivo de ese evento, veamos con qué estamos trabajando aquí, haga clic en Tacos,

308
00:26:04,550 --> 00:26:08,080
ah Entonces, lo que está pasando aquí es que estamos haciendo clic en el elemento,

309
00:26:08,080 --> 00:26:16,190
y también estamos haciendo clic en la casilla de verificación. Porque nuestro click en Label es a su vez

310
00:26:16,190 --> 00:26:22,060
marcando la casilla de verificación, que activará un clic en la entrada real.

311
00:26:22,060 --> 00:26:26,760
Ok bueno ¿Entonces qué más? Al igual que si hacemos clic en algo aquí que no es

312
00:26:26,760 --> 00:26:30,510
necesariamente el elemento de la lista o la entrada, ves que la etiqueta está ahí,

313
00:26:30,510 --> 00:26:36,690
Si hacemos clic como aquí, ¿qué tenemos? Obtenemos el LI.

314
00:26:36,690 --> 00:26:40,720
Así que ya ves que hacemos clic en diferentes elementos, el objetivo será un poco

315
00:26:40,720 --> 00:26:47,100
diferente. Lo que queremos hacer aquí es comprobar si el objetivo coincide con el

316
00:26:47,100 --> 00:26:53,320
cosa que estamos buscando. Así que diremos: "Si el e.target.matches", esto es

317
00:26:53,320 --> 00:26:58,370
la nueva API en el navegador, "entrada", y esto es algo así como si alguna vez has trabajado

318
00:26:58,370 --> 00:27:04,960
con jquery.isaninput, es lo mismo que .matches, luego queremos volver.

319
00:27:04,960 --> 00:27:15,070
Lo que significa que se saltan esto a menos que esté en entrada. Entonces, vamos a console.log el objetivo.

320
00:27:15,070 --> 00:27:20,150
Aquí vamos. Ahora, donde sea que hagamos clic, solo estamos recibiendo comprobaciones de entrada.

321
00:27:20,150 --> 00:27:24,130
Bueno. Así que ahora, tenemos que trabajar. Una vez más, eso es delegación de eventos,

322
00:27:24,130 --> 00:27:28,580
donde escuchamos un clic en algo más alto, y luego dentro de él verificamos si

323
00:27:28,580 --> 00:27:32,880
Es lo que realmente queremos, ya que podría desencadenar en unos pocos diferentes

324
00:27:32,880 --> 00:27:37,780
cosas. Ahora, lo que queremos hacer es ir a nuestra matriz de artículos,

325
00:27:37,780 --> 00:27:44,090
y queremos encontrar el que se marcó y establecer el hecho como "verdadero" o

326
00:27:44,090 --> 00:27:49,750
"false", según el estado en el que se encuentre. Por lo tanto, primero podemos obtener el índice,

327
00:27:49,750 --> 00:27:56,660
y es por eso que le di a cada entrada un valor de índice de datos, porque luego podemos usar

328
00:27:56,660 --> 00:28:03,300
que para hacer referencia a donde está en la matriz. Así que si decimos "const el = e.target",

329
00:28:03,300 --> 00:28:08,150
así que ponlo en su cuenta, ahora que tenemos ese elemento, podemos console.log,

330
00:28:08,150 --> 00:28:13,990
el.dataset.index. Es por esto que ponemos un índice de datos en cada una de las casillas de verificación.

331
00:28:13,990 --> 00:28:18,230
Si marca uno, le dirá el índice del elemento correspondiente en el

332
00:28:18,230 --> 00:28:24,850
formación. Luego, a partir de eso tomaremos ese índice, lo pegaremos en su propia variable

333
00:28:24,850 --> 00:28:32,780
solo por simplicidad, y luego tomaremos nuestros artículos con el índice y

334
00:28:32,780 --> 00:28:38,990
Acceder a la propiedad hecha. Lo pondremos a sí mismo, pero este es el truco.

335
00:28:38,990 --> 00:28:44,000
lo contrario. Así que si esto es verdad, va a ser todo lo contrario,

336
00:28:44,000 --> 00:28:46,920
lo cual es falso Si esto es falso, va a ser lo contrario.

337
00:28:46,920 --> 00:28:52,510
cual es verdad. Así que esto es solo un cambio entre lo verdadero y lo falso.

338
00:28:52,510 --> 00:28:56,410
Entonces, vamos a hacer lo mismo que hicimos con la cadena de caracteres,

339
00:28:56,410 --> 00:29:01,590
Almacenamiento local aquí. Toma eso. Pégalo aquí mismo. Entonces,

340
00:29:01,590 --> 00:29:08,750
ejecutaremos PopulateList una vez más, que actualizará la parte de visibilidad real en

341
00:29:08,750 --> 00:29:11,990
aquí. Así que vamos a cambiar la propiedad, vamos a almacenar eso en

342
00:29:11,990 --> 00:29:15,680
almacenamiento local, y vamos a actualizar visualmente lo que está en nuestra página.

343
00:29:15,680 --> 00:29:20,070
Ahora cuando refrescamos los "tacos", y debería actualizar la página ahora,

344
00:29:20,070 --> 00:29:24,730
"tacos" siempre va a ser "verdadero". ¿Por qué? Porque si vamos a nuestra aplicación y nos

345
00:29:24,730 --> 00:29:32,060
mira nuestro almacenamiento local aquí, deberías ver que "tacos" es "verdadero" y listo es

346
00:29:32,060 --> 00:29:35,990
"falso". Si tuviera que cambiar principalmente esto a "falso" y el primero a

347
00:29:35,990 --> 00:29:40,790
"true", luego actualizo la página, verás que ahora "fish" está marcado y "tacos".

348
00:29:40,790 --> 00:29:46,800
Así que cada vez que hagamos un cambio, lo vamos a reflejar en el almacenamiento local,

349
00:29:46,800 --> 00:29:51,030
y luego reenviar la lista completa. O incluso mejor, si puedes averiguar,

350
00:29:51,030 --> 00:29:56,340
"¿Cómo reenvío solo esa?" eso es aun mejor Así que eso es todo por hoy.

351
00:29:56,340 --> 00:30:01,550
Lo que ahora te desafiaré a hacer es hacer un botón aquí que diga Borrar

352
00:30:01,550 --> 00:30:06,330
Todos o Marcar todos, o Desmarcar todos. Cuando haces clic en el botón Eliminar,

353
00:30:06,330 --> 00:30:10,020
Los borrará a todos. Cuando hagas clic en Comprobar todo, los marcará todos.

354
00:30:10,020 --> 00:30:13,960
Al hacer clic en Desmarcar todo, los desmarcará todos y se reflejará en local.

355
00:30:13,960 --> 00:30:17,830
almacenamiento, así como volver a ejecutar esta lista poblada. Muchas gracias y te veo en

356
00:30:17,830 --> 00:30:18,780
el siguiente.

357
00:30:18,780 --> 00:30:20,780
♪ [música] ♪

