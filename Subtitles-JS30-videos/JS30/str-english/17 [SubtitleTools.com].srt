1
00:00:00,000 --> 00:00:03,000
♪ [music] ♪

2
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

3
00:00:07,630 --> 00:00:11,850
Today we're going to be working with
JavaScript's array.sort method,

4
00:00:11,850 --> 00:00:16,325
and we're going to be sorting this array
of band names, but kind of the catch we

5
00:00:16,325 --> 00:00:24,920
have here is that you need to sort them
without "The," "An," or "A" in front of

6
00:00:24,920 --> 00:00:28,063
the actual band name, because those are
articles and they don't go into

7
00:00:28,063 --> 00:00:32,351
alphabetizing your actual
name of your band.

8
00:00:32,351 --> 00:00:35,097
So go ahead and
pause the video. I think that you can do

9
00:00:35,097 --> 00:00:39,880
this on your own, at least give it a good
shot, and try to build this where you sort

10
00:00:39,880 --> 00:00:46,680
this array first, and then once you've
sorted the array without "the," "an," or

11
00:00:46,680 --> 00:00:53,490
"a," then put them into the actual html
here, but notice how "The," "An," or "A"

12
00:00:53,490 --> 00:00:57,880
still come along for the ride, they're
just not affecting the sort order.

13
00:00:57,880 --> 00:01:02,100
So pause the video and come back when
you've given it a good shot.

14
00:01:02,100 --> 00:01:09,500
Welcome back. So here I am, I'm going to
first make a sortedBands variable,

15
00:01:09,500 --> 00:01:13,360
and we'll take the bands and we are going
to sort it. Now, we know that sort will

16
00:01:13,360 --> 00:01:18,450
take a function name that gives us a and
b, and what is a? A is going to be the

17
00:01:18,450 --> 00:01:20,600
first thing that it passes us, the b is
going to be the second.

18
00:01:20,600 --> 00:01:23,880
It's sort of like it gives you two apples
in either hand, and you're like,

19
00:01:23,880 --> 00:01:26,760
"Which one is bigger?" Then the bigger one
you move to the top,

20
00:01:26,760 --> 00:01:30,720
and the other one you move to the bottom.
Or the one that comes earlier in the

21
00:01:30,720 --> 00:01:34,150
alphabet you move to the top, and the
other one you put in the bottom.

22
00:01:34,150 --> 00:01:37,220
Then you toss the bigger one, and you get
another apple in your hand,

23
00:01:37,220 --> 00:01:40,580
and you've got that first apple from the
first bunch, and then the second apple

24
00:01:40,580 --> 00:01:43,430
from the second bunch, and you say "Which
one's bigger?" You just keep doing that

25
00:01:43,430 --> 00:01:47,430
over and over and over again until you
have a sorted list. That's why it always

26
00:01:47,430 --> 00:01:48,910
gives you two things.

27
00:01:48,910 --> 00:01:53,990
So normally what we do is we say "if a is
greater than b," and we can just do this,

28
00:01:53,990 --> 00:01:57,750
even though they're not numbers. It's
still going to work with strings,

29
00:01:57,750 --> 00:02:02,230
because they're alphabetical. So "if a is
bigger than b," then we will return 1,

30
00:02:02,230 --> 00:02:12,000
else we are going to return -1. And let's
just console.log(sortedBands),

31
00:02:12,000 --> 00:02:17,740
see what we've got here. So we've got our
data and it is alphabetizing it,

32
00:02:17,740 --> 00:02:24,860
but it is basing it off of "A" and "The."
So what we need to do is go up here and

33
00:02:24,860 --> 00:02:29,310
create a new function that I like to call
strip, and it's going to take in the

34
00:02:29,310 --> 00:02:33,650
bandName, and then from there we are going
to return the bandName,

35
00:02:33,650 --> 00:02:41,330
but we are going to replace the word
"The," or "A," or "An." So one way that we

36
00:02:41,330 --> 00:02:46,360
could replace all three in one go is to
use a regular expression,

37
00:02:46,360 --> 00:02:50,150
and we can say when it starts with, that's
what the caret is for,

38
00:02:50,150 --> 00:02:54,030
and I'm by no means a regular expression
expert, if you know anything about regex

39
00:02:54,030 --> 00:02:57,960
you can probably find a better way to do
this, but the way that I've done it is you

40
00:02:57,960 --> 00:03:04,010
can say "a," "the," or "an," and you want
to make that insensitive.

41
00:03:04,010 --> 00:03:10,080
So it's going to match "an," or "An," or
"AN," so there we go.

42
00:03:10,080 --> 00:03:13,580
I'm sure there's a flag you can pass so
you don't need that space in there,

43
00:03:13,580 --> 00:03:17,300
where you could say just match a whole
word. What I'm trying to do is make sure

44
00:03:17,300 --> 00:03:21,080
that we don't catch this, where some word
like "Anywhere" starts with "An," but

45
00:03:21,080 --> 00:03:26,950
that's not actually the article, "An." So
we are replacing. Make sure you spell

46
00:03:26,950 --> 00:03:30,580
"replace" right, and we are going to be
replacing that with nothing,

47
00:03:30,580 --> 00:03:35,980
and then we'll just call trim on the end
there just in case we have any spaces

48
00:03:35,980 --> 00:03:38,260
after it. Good.

49
00:03:38,260 --> 00:03:41,169
Then, what we can do...
Let's see if that works, actually.

50
00:03:41,169 --> 00:03:48,760
So if I call that strip function
from the console, say "An old dog," it

51
00:03:48,760 --> 00:03:55,080
returns to you "old dog," "anold dog,"
"arnold dog," it won't do it,

52
00:03:55,080 --> 00:04:00,430
"The old dog" will give you "old dog."
Good. So that function is working.

53
00:04:00,430 --> 00:04:06,240
Now what we can do is we simply just
change our if statement to a strip and

54
00:04:06,240 --> 00:04:12,110
strip, and notice how we are only using
strip in the if statement,

55
00:04:12,110 --> 00:04:15,790
and we're not actually going to be
modifying this data. So the data that we

56
00:04:15,790 --> 00:04:19,780
use to decide where it goes is not
necessarily the data that is going to be

57
00:04:19,780 --> 00:04:23,400
in the array. So we're using strip, now
let's see where we're at.

58
00:04:23,400 --> 00:04:28,000
Good, Anywhere But Here, The Bled,
Counterparts, The Devil Wears Prada,

59
00:04:28,000 --> 00:04:32,700
good. So now it's totally ignoring it. We
can make this a lot easier here,

60
00:04:32,700 --> 00:04:39,210
so first of all what we can do, we could
simply just make it return,

61
00:04:39,210 --> 00:04:44,570
strip (a) > strip (b), if that is true we
return 1, otherwise we return -1,

62
00:04:44,570 --> 00:04:50,360
so we're just using a ternary operator
there. Still works good.

63
00:04:50,360 --> 00:04:58,700
We can make this an arrow function, good,
still works, and now you see my editor's

64
00:04:58,700 --> 00:05:02,210
yelling at me because it's... If the only
thing you're doing in a function is

65
00:05:02,210 --> 00:05:06,260
returning something, you can use the
implicit return. So I'm going to take off

66
00:05:06,260 --> 00:05:11,600
that bracket and the semicolon, take of
this bracket, going to put it on the same

67
00:05:11,600 --> 00:05:16,638
line, and I'm going to remove the return
keyword, and that's doing the exact same

68
00:05:16,638 --> 00:05:19,620
thing, just in one hot line.

69
00:05:19,620 --> 00:05:25,080
There we go, working good. So we have the
bands.sort, and now we will go ahead and

70
00:05:25,080 --> 00:05:37,518
grab our bands, which is here, say
document.querySelector('#bands'.

71
00:05:37,518 --> 00:05:44,587
)innerHTML equals, we'll take our
sortedBands, and we are going to loop over

72
00:05:44,587 --> 00:05:50,693
each of them. So we'll use map, and from
that map we will return the band,

73
00:05:50,693 --> 00:05:56,243
but the band in a list item, and then
we will join it all in one go.

74
00:05:56,243 --> 00:06:01,750
So what does that do, it takes the element
and sets the innerHTML to b,

75
00:06:01,750 --> 00:06:05,360
and we can put this on its own line,
sortedBands, but we want to map over each

76
00:06:05,360 --> 00:06:09,530
of those, and then that's going to return
an array, so we want to join it.

77
00:06:09,530 --> 00:06:12,460
See where we're at...there we go. Anywhere
But Here, The Bled,

78
00:06:12,460 --> 00:06:15,390
we're got everything being dumped into the
DOM there.

79
00:06:15,390 --> 00:06:19,830
Let me show you real quick, if I take that
join off, you'll notice that we get these

80
00:06:19,830 --> 00:06:25,050
commas showing up here, and that's because
what happens is we have this sortedBands

81
00:06:25,050 --> 00:06:30,310
array, which is everything, and if you
were to call .toString on it,

82
00:06:30,310 --> 00:06:36,760
then that's exactly what the DOM will do.
When you try to set something to innerHTML

83
00:06:36,760 --> 00:06:41,890
that is not a string, like an array, then
it will just call .toString on it,

84
00:06:41,890 --> 00:06:45,490
and by default it's going to put a comma
in between each one. So we need to put

85
00:06:45,490 --> 00:06:55,670
that .join on the end so that will join it
into one big string rather than a bunch of

86
00:06:55,670 --> 00:06:58,240
strings with a comma in between.

87
00:06:58,240 --> 00:07:02,040
So let's double check that, working great.
Hopefully you enjoyed that,

88
00:07:02,040 --> 00:07:03,681
I will see you tomorrow.

89
00:07:03,681 --> 00:07:05,681
♪ [music] ♪
