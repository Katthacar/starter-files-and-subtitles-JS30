1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:00,355 --> 00:00:03,355
♪ [music] ♪

3
00:00:07,090 --> 00:00:11,390
Hello. Hello. Hello. Today, we are going
to be learning about two main things.

4
00:00:11,390 --> 00:00:13,960
First, we're going to be learning about
local storage and, second,

5
00:00:13,960 --> 00:00:17,400
we're going to be learning about something
called "event delegation".

6
00:00:17,400 --> 00:00:21,180
So what we've got here is sort of a
[tapas] menu, where you can add things,

7
00:00:21,180 --> 00:00:25,330
and then if you want them you can check
and uncheck them. But kind of the cool

8
00:00:25,330 --> 00:00:30,330
thing, where if you were to type in like
"taco", I'm going to say "pork taco",

9
00:00:30,330 --> 00:00:36,230
hit Enter, and then when I refresh the
page it's still there. If I click on one

10
00:00:36,230 --> 00:00:40,190
of them to taco it or check it, as normal
people would do, you refresh,

11
00:00:40,190 --> 00:00:44,630
it's still going to be there. So that's
going to be persisting our state with

12
00:00:44,630 --> 00:00:48,960
local storage. Next up, we're also going
to be doing something called "event

13
00:00:48,960 --> 00:00:55,310
delegation", because when I add another
item here, like fish, and I click on it,

14
00:00:55,310 --> 00:01:00,150
I can taco it right away. Why can I do
that? Because if you add an event listener

15
00:01:00,150 --> 00:01:05,520
on something that doesn't exist, you'll
know that in the future it won't be

16
00:01:05,520 --> 00:01:10,280
clicked. So we're going to look at that
error as well, and use event delegation to

17
00:01:10,280 --> 00:01:15,450
fix it. So I've gone ahead and just
selected the Add Items, which in our case

18
00:01:15,450 --> 00:01:19,340
is this form element right here. So when
someone submits that form,

19
00:01:19,340 --> 00:01:23,630
we're going to add an item. Then, I have
also selected this UL with a class of

20
00:01:23,630 --> 00:01:28,120
"plates" here. That's where we're going to
load all of our tapas dishes into.

21
00:01:28,120 --> 00:01:31,810
Then, finally, we're going to be storing
all of our data in an array.

22
00:01:31,810 --> 00:01:36,270
It's going to be an array of objects,
which has the name of the array,

23
00:01:36,270 --> 00:01:40,990
as well as the status whether it's tacoed
or done, or whatever it is that we are

24
00:01:40,990 --> 00:01:45,890
here. So we're going to go ahead and grab
that form element, which is Add Items,

25
00:01:45,890 --> 00:01:50,510
and we're going to listen for the submit
event. Why do we listen for the submit

26
00:01:50,510 --> 00:01:54,210
event here? Because that's what we
actually need. A lot of times people,

27
00:01:54,210 --> 00:01:58,670
they listen for a click on this button.
But you want to listen for a submit,

28
00:01:58,670 --> 00:02:02,900
when someone hits Enter, when someone
clicks a button, when some external thing

29
00:02:02,900 --> 00:02:06,040
submits it. We need to make sure that we
are covering all our bases,

30
00:02:06,040 --> 00:02:14,080
and by listening to the submit event, we
cover all of our bases with that.

31
00:02:14,080 --> 00:02:19,070
So we're going to run a function called
"addItem" when somebody submits it,

32
00:02:19,070 --> 00:02:23,260
and we're going to create that function
here. It's going to give us the event,

33
00:02:23,260 --> 00:02:28,730
and let's just console.log, "Hello". I'm
going to open mine up here,

34
00:02:28,730 --> 00:02:34,910
and I'm going to go to the console here.
Now, when I type in something like "fish,"

35
00:02:34,910 --> 00:02:39,660
you see that, oh, "Hello" is quickly
flashed there. Let me do it again.

36
00:02:39,660 --> 00:02:43,750
Oh, if you click on this button here,
Preserve Log, you can see what's happening

37
00:02:43,750 --> 00:02:50,060
here. I'm going to hit Enter, and then
automatically we log "Hello",

38
00:02:50,060 --> 00:02:54,660
and then we see "Navigated to" and this is
the URLs of where I'm working here.

39
00:02:54,660 --> 00:02:58,490
So what's happening is our page is
actually refreshing, and we don't want

40
00:02:58,490 --> 00:03:03,240
that. So what we can do is we can say
e.preventDefault, and that's going to stop

41
00:03:03,240 --> 00:03:07,080
the page from reloading. Because by
default, a form is just going to reload

42
00:03:07,080 --> 00:03:12,300
the page or send the data to an external
source, generally what's your server side.

43
00:03:12,300 --> 00:03:16,320
In this case, we're going to be doing an
all client side, so prevent the default of

44
00:03:16,320 --> 00:03:23,550
that happening. Now when I type in
something and submit that, we don't get

45
00:03:23,550 --> 00:03:28,960
anything. Why is that? Because nothing is
happening. If I were to console.log

46
00:03:28,960 --> 00:03:35,550
"hello," once more, I'm going to say
"hello," we see "hello" in the thing but

47
00:03:35,550 --> 00:03:41,920
the page does not reload. Okay. Now that
we have that, what we need to do is to

48
00:03:41,920 --> 00:03:48,920
take that text of this box and put it into
an object. So first of all,

49
00:03:48,920 --> 00:03:53,730
we are going to make an item and that item
is going to have two.

50
00:03:53,730 --> 00:03:57,990
It's going to have text of item name, and
we'll replace that in a second.

51
00:03:57,990 --> 00:04:01,430
It's going to have a done state of
"false". So by default, it's not going to

52
00:04:01,430 --> 00:04:05,510
be checked or tacoed. Now, how do we get
this text here? Well,

53
00:04:05,510 --> 00:04:13,880
we can do this, "const text =" and we're
going to first grab this input box,

54
00:04:13,880 --> 00:04:19,820
which has a name of item on it. So we
could say "document.querySelector"

55
00:04:19,820 --> 00:04:27,440
but we can also do "this.querySelector."
Why can we do that? "Name=item"

56
00:04:27,440 --> 00:04:32,360
why can we do that? That's because this is
going to be the actual form.

57
00:04:32,360 --> 00:04:36,770
That's the whole form tag, and then we'll
look inside of that form tag for something

58
00:04:36,770 --> 00:04:41,870
that has a name attribute of "Item".
That's really helpful if you have multiple

59
00:04:41,870 --> 00:04:45,060
forms on a page. You don't just want to be
globally selecting it.

60
00:04:45,060 --> 00:04:49,380
You want to narrow down your search inside
of the one form that we're working with.

61
00:04:49,380 --> 00:04:53,770
So we've got that text. If we were just to
wrap that whole thing in parentheses,

62
00:04:53,770 --> 00:04:57,270
it's going to execute first and we can
call ".value" against it.

63
00:04:57,270 --> 00:05:00,290
Because that's going to give us the input,
and then input has a property called

64
00:05:00,290 --> 00:05:05,070
"value," which is whatever the user has
typed into it. Then, we can go here.

65
00:05:05,070 --> 00:05:09,320
Type "text." Or if you've watched my ES6
videos, then you know instead of saying

66
00:05:09,320 --> 00:05:15,780
"text: text," we can use the ES6 shorthand
property, which is just "text".

67
00:05:15,780 --> 00:05:20,770
So we just created this object here. Let's
console.log the item.

68
00:05:20,770 --> 00:05:24,410
Let's go over to our console. Let's type
in something like "fish."

69
00:05:24,410 --> 00:05:28,920
Now, when I run that, you should now
see an object in your console that has a

70
00:05:28,920 --> 00:05:33,010
done of "false" and a text of whatever the
user has put in there.

71
00:05:33,010 --> 00:05:35,850
If you run it a couple times, you're going
to get it console logged.

72
00:05:35,850 --> 00:05:39,740
One thing we want to do is clear that
input. What we can do is we can say

73
00:05:39,740 --> 00:05:45,280
"this.reset." Because "this" is the form
element, and form elements have a method

74
00:05:45,280 --> 00:05:49,760
called "reset" on it. You've probably run
into this where you've spent an hour

75
00:05:49,760 --> 00:05:53,610
filling out a form online somewhere, and
you accidentally click the Reset button

76
00:05:53,610 --> 00:05:59,110
instead of the Submit button. That's what
it's hooked up to is the ".reset."

77
00:05:59,110 --> 00:06:05,210
So let's see where we're at now. "Fish,"
there we go. It refreshes it,

78
00:06:05,210 --> 00:06:08,930
it clears that, and we create this object.
We're not seeing it,

79
00:06:08,930 --> 00:06:14,860
because we're not console logging it. Now,
what we want to do is take that item here

80
00:06:14,860 --> 00:06:19,290
and put that into this item's array. So
what we do is we just say

81
00:06:19,290 --> 00:06:27,950
"items.push(item)." Now, let's take a fish
and we will say "squid."

82
00:06:27,950 --> 00:06:32,690
Now, if we look at our item's array, you
see that we have "Object" with two things

83
00:06:32,690 --> 00:06:37,750
in it. We can go one step further and
console.table the item's array,

84
00:06:37,750 --> 00:06:42,750
and you see that we have "Fish" and
"Squid". Now, that's all we've done to get

85
00:06:42,750 --> 00:06:46,760
our data in it. It's not going to persist
when we refresh just yet.

86
00:06:46,760 --> 00:06:50,380
We'll do that in just a second. But at
this point, we need to create a second

87
00:06:50,380 --> 00:06:54,450
function that we're going to call
"populateList," and that's going to create

88
00:06:54,450 --> 00:06:58,190
the actual HTML here. So we're going to
say "function populateList".

89
00:06:58,190 --> 00:07:04,650
That populateList function needs two
things. First of all, it needs a list of

90
00:07:04,650 --> 00:07:08,660
plates to populate. We've stored that
where? We've stored that in our item's

91
00:07:08,660 --> 00:07:13,340
array. Let me show you once more. If I
type "fish" and look at our item's array,

92
00:07:13,340 --> 00:07:17,730
you see that we have an array of things,
which has a text of "fish" and done.

93
00:07:17,730 --> 00:07:22,390
So we need to pass in what that's going to
be called, and you can call that "Items"

94
00:07:22,390 --> 00:07:27,050
if you prefer to name the variable the
same thing. But let's call that "plates"

95
00:07:27,050 --> 00:07:31,620
and we're going to set that to be a
default of an empty object.

96
00:07:31,620 --> 00:07:36,170
The reason why I do that is because if for
some reason you forget to pass in

97
00:07:36,170 --> 00:07:39,900
something, it's not going to break your
JavaScript. It's just going to loop over

98
00:07:39,900 --> 00:07:44,410
an array of nothing, and then your map
function will work just fine.

99
00:07:44,410 --> 00:07:49,420
Then, second of all, we need a place to
put the HTML and that's called the "plates

100
00:07:49,420 --> 00:07:55,280
list." We are going to pass in our items
list. So why am I doing that?

101
00:07:55,280 --> 00:08:00,250
Why am I not just like reaching outside
and grabbing the list of items and

102
00:08:00,250 --> 00:08:03,840
grabbing the place where we will dump
them? That's because I want this

103
00:08:03,840 --> 00:08:08,780
populateList function to be a little bit
more resilient. Meaning that I could pass

104
00:08:08,780 --> 00:08:14,210
in any array of plates and any destination
HTML element, and it will work.

105
00:08:14,210 --> 00:08:19,140
So if in the future I decided to have two
different lists or two different menus,

106
00:08:19,140 --> 00:08:23,660
that would be fine. I could still use a
single populateList function and just pass

107
00:08:23,660 --> 00:08:27,880
it a different array of items and a
different HTML element to dump it.

108
00:08:27,880 --> 00:08:32,730
So we go inside of here and we take this
plate's array here, and we are going to

109
00:08:32,730 --> 00:08:38,850
map over it. So we hit Map. We take our
item, or let's call it "plate,"

110
00:08:38,850 --> 00:08:43,300
singular, and then we have the index and
I'll show you why we need that in just a

111
00:08:43,300 --> 00:08:48,630
second. Now, from here this is going to
return some HTML. So we're going to use

112
00:08:48,630 --> 00:08:53,820
back text. The last thing we need to do
is, in front of this plates.map,

113
00:08:53,820 --> 00:08:58,350
we need to stick this either in a variable
or directly into the HTML.

114
00:08:58,350 --> 00:09:04,140
So I'm going to say "plateslist[removed]
=" and I'll show you what this does in

115
00:09:04,140 --> 00:09:09,580
just a second. So we're going to loop over
every single item in our array,

116
00:09:09,580 --> 00:09:12,960
and that's just an object and we're going
to map. Which again,

117
00:09:12,960 --> 00:09:19,710
a map will take in an array of raw data
and return an array of some other data.

118
00:09:19,710 --> 00:09:24,080
In our case, we're going to take in the
objects and return a string from each one.

119
00:09:24,080 --> 00:09:27,120
That's why we're using these back texts
here. So we're going to give ourselves a

120
00:09:27,120 --> 00:09:34,240
list item, and then let's just take a
label and let's forget about all of the

121
00:09:34,240 --> 00:09:39,960
stuff. Let's just get it working. We'll
put "plate.text" inside of it.

122
00:09:39,960 --> 00:09:46,810
Then, the last thing we need to do is call
a ".join" on here. Because map is going to

123
00:09:46,810 --> 00:09:51,870
return an array, when really if we're
setting inner HTML, we just need one big

124
00:09:51,870 --> 00:09:57,750
string. So this little ".join" on the end
is going to take this array that map makes

125
00:09:57,750 --> 00:10:01,140
and turn it into one big string. So if we
have six or seven items,

126
00:10:01,140 --> 00:10:05,240
it's not going to give us an array with
six strings. It's going to give us one

127
00:10:05,240 --> 00:10:13,430
huge string. So now, if we take this
populateList, you go back up here right

128
00:10:13,430 --> 00:10:19,610
before we run it, and we run populateList.
We are going to pass it our list of items

129
00:10:19,610 --> 00:10:24,390
and our itemsList. Let's try it out. So if
I type "fish", aha,

130
00:10:24,390 --> 00:10:31,600
"fish" and "squid," and "tacos," and you
see what's happening here is that every

131
00:10:31,600 --> 00:10:36,550
time we add an item, we are calling this
populateList function,

132
00:10:36,550 --> 00:10:41,910
which is then going to create a list item
with a label inside of it.

133
00:10:41,910 --> 00:10:46,470
You can inspect this and see what we've
got going on here. It's going to create a

134
00:10:46,470 --> 00:10:50,110
list item. One thing that I should say is
this populateList function,

135
00:10:50,110 --> 00:10:55,960
every time we add an item, it's recreating
the entire list. So if you are really

136
00:10:55,960 --> 00:10:59,530
worried about performance, in this case
it's not a big deal. It's very,

137
00:10:59,530 --> 00:11:05,800
very fast. But if you were doing this
maybe every half a second or every second,

138
00:11:05,800 --> 00:11:10,170
or you had a bunch of animations, you
would want to look at, "How do I update

139
00:11:10,170 --> 00:11:15,070
just that one list item that I have,
rather than rerender the entire list?"

140
00:11:15,070 --> 00:11:18,790
That's where something like React or
Angular becomes really helpful,

141
00:11:18,790 --> 00:11:22,500
because they're smart enough to know,
"Okay. Rather than just blowing away this

142
00:11:22,500 --> 00:11:27,630
entire unordered list and rerendering the
whole thing, let me just figure out what's

143
00:11:27,630 --> 00:11:33,490
the minimum HTML that I need to change on
the page without having to change the rest

144
00:11:33,490 --> 00:11:38,340
of it. So we've got this label here, and
above it I'm going to have an input with

145
00:11:38,340 --> 00:11:44,910
the type of checkbox. We need a
"data-index," and I'll show you why that's

146
00:11:44,910 --> 00:11:51,760
helpful in just a few minutes. We're going
to set that to the index that we have

147
00:11:51,760 --> 00:12:00,310
here. We're going to have an ID, which is
going to be Item I, because that's going

148
00:12:00,310 --> 00:12:05,690
to be Item 1, Item 2, Item 3, Item 4.
Here, we need to go back to our label and

149
00:12:05,690 --> 00:12:12,040
hook that ID up. So we'll say "Item I",
and that's how when you click on the label

150
00:12:12,040 --> 00:12:16,920
the input will check itself. That's how we
link the two. The ID and the "for" are

151
00:12:16,920 --> 00:12:22,060
exactly the same thing. Then, finally, we
need to know whether or not these items

152
00:12:22,060 --> 00:12:26,700
are going to be checked or not. Because
when I rerender it, if it's already

153
00:12:26,700 --> 00:12:30,730
checked, if it has a Done status, we need
to put the "checked" attribute.

154
00:12:30,730 --> 00:12:37,330
So if I were to say "checked," then all of
them would automatically be checked.

155
00:12:37,330 --> 00:12:47,480
So if I add "fish," see that has a
"checked" state? But we have to look at

156
00:12:47,480 --> 00:12:52,810
the items in there, and the first one has
a property of "done".

157
00:12:52,810 --> 00:12:57,060
So if it has a property of "done," put the
"checked" attribute.

158
00:12:57,060 --> 00:13:00,060
Otherwise, we leave it off. Because you
might know that you cannot say

159
00:13:00,060 --> 00:13:05,210
"checked=false." That will still make
it... Watch. If I say "checked=false" and

160
00:13:05,210 --> 00:13:13,420
I type in "fish," it still checks it. If I
say "checked=emoji poop,"

161
00:13:13,420 --> 00:13:17,980
it's still checked. That's because
anything, any existence of the property

162
00:13:17,980 --> 00:13:24,180
checked or the attribute checked will make
it check. So we need to create a turnery

163
00:13:24,180 --> 00:13:29,810
operator here, where we say if the
"plate.done" attribute is true,

164
00:13:29,810 --> 00:13:34,600
then we're going to put the checked.
Otherwise, we're just going to do nothing.

165
00:13:34,600 --> 00:13:38,800
It's just an empty string. Sometimes I
thought to put "null" here.

166
00:13:38,800 --> 00:13:43,990
But the word "null" will actually show up
in your HTML. So you need two blank

167
00:13:43,990 --> 00:13:48,910
strings. Let's see if anything is broken.
Good. "Fish" is working.

168
00:13:48,910 --> 00:13:52,150
Then, when I click it, it will check the
taco on and off. If you're wondering how I

169
00:13:52,150 --> 00:13:56,780
did this custom thing here, if you take a
look at the input box,

170
00:13:56,780 --> 00:14:00,850
you'll see that I've displayed "none;". If
I take that off, the input box is actually

171
00:14:00,850 --> 00:14:07,460
still there. I've just hidden it with CSS.
If we open up our CSS here,

172
00:14:07,460 --> 00:14:13,980
let's look for the tacos, here we go, what
we say is the plate input,

173
00:14:13,980 --> 00:14:19,790
the label before it, has a blank sort of
emoji that's just a square,

174
00:14:19,790 --> 00:14:25,140
but then when the input is checked, turn
that content from a blank square into a

175
00:14:25,140 --> 00:14:29,830
taco. So you could really put anything you
wanted here, and it will turn it on and

176
00:14:29,830 --> 00:14:33,860
off. It's sort of a little trick that you
can do to make it work.

177
00:14:33,860 --> 00:14:37,340
I think it looks a little bit better, and
that's a way that you can still have your

178
00:14:37,340 --> 00:14:42,890
proper checkbox for data. But you can
display them with whatever HTML or CSS

179
00:14:42,890 --> 00:14:48,440
that you want. So we've got that up and
running. Every time I add a new item it

180
00:14:48,440 --> 00:14:55,510
will add it to the list, and I can check
it and uncheck it. The other problem here

181
00:14:55,510 --> 00:15:02,300
is that when I refresh the page, that list
is not persisting. So what we're going to

182
00:15:02,300 --> 00:15:06,220
do is we're going to be storing our data
in local storage. Now,

183
00:15:06,220 --> 00:15:10,760
if you've never worked with local storage
before, essentially how it works is that

184
00:15:10,760 --> 00:15:16,010
you have this object in the browser called
"Local Storage." If you open that up,

185
00:15:16,010 --> 00:15:24,180
this is just a list of things that have
been saved to this domain.

186
00:15:24,180 --> 00:15:29,320
So this is only a computer by computer,
browser by browser, website by website

187
00:15:29,320 --> 00:15:34,210
basis. But you're able to save text to the
browser, and then when you reload the page

188
00:15:34,210 --> 00:15:38,300
you'll be able to grab this text out of
it. So if you go to your Application tab

189
00:15:38,300 --> 00:15:42,230
in Chrome Dev Tools, there's a whole bunch
of stuff here. If you go to Local Storage

190
00:15:42,230 --> 00:15:45,430
and you click on the domain that you're
working on, in this case I'm working

191
00:15:45,430 --> 00:15:50,500
locally so it's just "file," you should
see that there's a key of Items and a

192
00:15:50,500 --> 00:15:53,550
value of something else. Now, you might
see a whole bunch of other stuff here,

193
00:15:53,550 --> 00:15:57,980
depending if you've ever run other
applications on your local host.

194
00:15:57,980 --> 00:16:04,440
This is where I've stored the text of what
we're going for and the property of done

195
00:16:04,440 --> 00:16:11,560
to "false" or "true," etc., etc. So how
do we actually save that to local storage

196
00:16:11,560 --> 00:16:16,640
or done? Well, it's actually pretty easy.
When we populate the list here,

197
00:16:16,640 --> 00:16:21,500
what we also need to do is set this item's
array into local storage.

198
00:16:21,500 --> 00:16:26,000
So you think you might be able to do this,
localStorage. , and then the API is

199
00:16:26,000 --> 00:16:32,770
.setItem, .getItem, and .removeItem or
deleteItem. I'll double check that.

200
00:16:32,770 --> 00:16:36,910
So localStorage.setItem, and then we're
going to set the item,

201
00:16:36,910 --> 00:16:41,170
"Items." That's the key right here, what
it's going to be called.

202
00:16:41,170 --> 00:16:44,050
Then, what are you going to set the data
to? Well, you might just think,

203
00:16:44,050 --> 00:16:48,430
"Okay. I'll just pass items, because
that's my items array." "Fish."

204
00:16:48,430 --> 00:16:52,470
Okay. So we just ran it. We gathered the
item, we populated to the list,

205
00:16:52,470 --> 00:16:55,400
and then we called
"localStorage.setItems." We go to our

206
00:16:55,400 --> 00:17:02,450
local storage here, and you see this,
"object Object." What does that mean?

207
00:17:02,450 --> 00:17:06,990
Well, what's happening here is that local
storage, although it seems like it's an

208
00:17:06,990 --> 00:17:14,250
object, it's simply just a key value store
and you may only use strings in local

209
00:17:14,250 --> 00:17:20,390
storage. So if we were to take our items
here and call ".toString" on it,

210
00:17:20,390 --> 00:17:25,460
you see "object Object". What's happening
is that when you try to put something

211
00:17:25,460 --> 00:17:29,540
other than a string into local storage,
the browser goes, "Oh,

212
00:17:29,540 --> 00:17:33,360
I don't know how to handle this. Let me
just convert it to a string,

213
00:17:33,360 --> 00:17:38,580
and let me just use the .toString method
that exists on the number or the object,

214
00:17:38,580 --> 00:17:42,660
or the array." In our case, it's an array.
What returns is the browser goes,

215
00:17:42,660 --> 00:17:47,380
"object Object" and that's its
representation. So we can't really do

216
00:17:47,380 --> 00:17:51,520
that, because there's not actually an
object here. It's just the word "object

217
00:17:51,520 --> 00:17:58,310
Object". So what we actually need to do is
stringify it before we convert it.

218
00:17:58,310 --> 00:18:02,120
So in the browser, we have this thing
called "JSON.stringify" and when you pass

219
00:18:02,120 --> 00:18:08,770
it your items, it's going to convert your
objects and arrays into a JSON string

220
00:18:08,770 --> 00:18:14,040
equivalent. So we just need to wrap this
sucker. You send out "parse(items),"

221
00:18:14,040 --> 00:18:23,630
and now when you add an item in here,
"fish," oh, "Unexpected token o at JSON."

222
00:18:23,630 --> 00:18:28,240
What is our problem? Oh, we're not parsed.
JSON.stringify. Parsed is going to be the

223
00:18:28,240 --> 00:18:38,090
other way. "Fish" and "tacos," and "yum,"
and now when you go to your Application

224
00:18:38,090 --> 00:18:42,730
tab here, you see that this is now being
stored. It looks like an array of objects,

225
00:18:42,730 --> 00:18:46,440
but it really is just text. I can show you
that, because we can say

226
00:18:46,440 --> 00:18:53,380
"localStorage.getItem('items')." That is
just a string. However,

227
00:18:53,380 --> 00:18:59,120
what you can do is you can wrap that thing
in the JSON.parse and that's going to then

228
00:18:59,120 --> 00:19:03,510
take it from the string and put it back
into whatever it was initially.

229
00:19:03,510 --> 00:19:08,810
In this case, it's going to be an array of
actual objects. So that's what we need to

230
00:19:08,810 --> 00:19:16,330
do on page load. We go down here and when
the page loads, the very last thing,

231
00:19:16,330 --> 00:19:23,260
we'll say "populateList" and we can say
"items." But again, you don't know.

232
00:19:23,260 --> 00:19:27,870
Do we have to do JSON.parse? No, not here.
We are going to say "items" and

233
00:19:27,870 --> 00:19:33,400
"itemsList." But the "items" doesn't exist
on page load. Remember,

234
00:19:33,400 --> 00:19:38,460
the first thing we do up here is we create
an empty object? So what we can do is we

235
00:19:38,460 --> 00:19:43,390
can say "items =
JSON.parse(localStorage.getItem('items'))

236
00:19:43,390 --> 00:19:51,360
or a blank array. What that will do is
it's going to try and get it from local

237
00:19:51,360 --> 00:19:59,000
storage, and then if it isn't there it's
going to fall back to an empty array.

238
00:19:59,000 --> 00:20:02,950
Then, on page load, before we do any of
this stuff, our Items is going to be

239
00:20:02,950 --> 00:20:09,100
populated, and then when we reach here we
can call our "populateList" just as we did

240
00:20:09,100 --> 00:20:15,530
right here. So if we refresh the page now,
oh-ho, you see that our "fish,"

241
00:20:15,530 --> 00:20:20,260
"tacos," and "yum" is now persisting. I
can refresh all that I want,

242
00:20:20,260 --> 00:20:25,710
and the data is always going to be there.
So a real quick review of what we just did

243
00:20:25,710 --> 00:20:30,240
there. When we add an item, you put it
into local storage and you update your

244
00:20:30,240 --> 00:20:36,790
local storage every single time. Then, on
page load, what's going to happen is that

245
00:20:36,790 --> 00:20:41,650
we check if there is something in local
storage, and then we fall back to an empty

246
00:20:41,650 --> 00:20:44,660
array. Now, I just want to make sure that
that still works with nothing.

247
00:20:44,660 --> 00:20:49,240
So we can go to our application, File,
click on this thing, and exit.

248
00:20:49,240 --> 00:20:54,230
Then, when we refresh the page, you see
that there is nothing there.

249
00:20:54,230 --> 00:20:59,110
So if I type in "items", you see that it's
fallen back to this square bracket,

250
00:20:59,110 --> 00:21:03,840
which is a blank array. Okay. Good. Good.
Good. We are in good shape.

251
00:21:03,840 --> 00:21:09,290
Next, what we need to do is persist the
toggling of it. Because if you add in

252
00:21:09,290 --> 00:21:16,390
"fish" and "tacos," and "yum," and you
check one and refresh the page,

253
00:21:16,390 --> 00:21:24,450
that state is no longer handled. So what
we need to do is create a new function

254
00:21:24,450 --> 00:21:29,520
called "toggleDone," and then we're going
to pass the event there.

255
00:21:29,520 --> 00:21:36,000
Now, when will this function run? Let's go
down here. You think that you would select

256
00:21:36,000 --> 00:21:41,440
each of the checkboxes right here, and
then listen for either a change or a click

257
00:21:41,440 --> 00:21:48,250
event on those checkboxes. Then, when that
happens you will go ahead and perform

258
00:21:48,250 --> 00:21:53,690
something. Now, let me show you a real
quick example. If I say "const checkBoxes

259
00:21:53,690 --> 00:21:58,610
= document.querySelectorAll, and I'm just
going to select every input on the page,

260
00:21:58,610 --> 00:22:05,320
and I'll say checkBoxes.forEach(input =>
input.addEventListener('click'".

261
00:22:05,320 --> 00:22:11,330
Then, when that runs, I'm just going to
run a quick function here,

262
00:22:11,330 --> 00:22:18,710
that will alert I. Okay. What I did there,
when I click on a checkbox,

263
00:22:18,710 --> 00:22:22,420
we should alert "hi." So click it, and
when I click one of them,

264
00:22:22,420 --> 00:22:29,800
we showed alert "hi," but it's not
working. Hmm, what's going on here?

265
00:22:29,800 --> 00:22:37,430
Well, if we look at our checkboxes array,
there's two things in there and it's this

266
00:22:37,430 --> 00:22:42,150
thing. Okay. So when I click on that, that
works. When we click on Add Item,

267
00:22:42,150 --> 00:22:47,700
that works. So where are these three
inputs? Why are they not showing up in my

268
00:22:47,700 --> 00:22:53,770
note list? The problem that we've run into
here is that when this code runs,

269
00:22:53,770 --> 00:22:58,470
when our event listener runs, when our
selector runs, this doesn't exist yet.

270
00:22:58,470 --> 00:23:01,790
Why? Because we need to populate the list
first. So you might think,

271
00:23:01,790 --> 00:23:06,870
"Okay. That's fine. Let's populate the
list first and let's take a look at our

272
00:23:06,870 --> 00:23:11,880
checkboxes array." Okay. Look at it.
There's more. There they are.

273
00:23:11,880 --> 00:23:15,650
Okay. Are we out? Now, if I click on one
of these, okay, now it's working.

274
00:23:15,650 --> 00:23:22,270
But what happens if I add an additional
item like here? "Hello."

275
00:23:22,270 --> 00:23:25,530
It adds it. Okay, good. Now, I'm going to
click on this checkbox.

276
00:23:25,530 --> 00:23:34,300
It doesn't work. Does "yum" still work?
No. None of these work now.

277
00:23:34,300 --> 00:23:40,050
What's happening is because these inputs
here are created after we listen for them,

278
00:23:40,050 --> 00:23:44,280
they don't have event listeners attached
to them. The whole idea behind event

279
00:23:44,280 --> 00:23:48,830
delegation is rather than listening for a
click or a change on these checkboxes

280
00:23:48,830 --> 00:23:55,120
directly, what we do is we look for
somebody who is going to be on the page at

281
00:23:55,120 --> 00:24:00,250
the time of listening. If we look at our
HTML here, you're going to see that that

282
00:24:00,250 --> 00:24:05,140
unordered list that holds everything, UL
with a class of "plates,"

283
00:24:05,140 --> 00:24:09,600
that does exist. So what we're going to do
is we're going to listen for a click on

284
00:24:09,600 --> 00:24:13,430
the plates, and then we're going to figure
out, "Did they actually mean to click one

285
00:24:13,430 --> 00:24:18,050
of the inputs inside of it?" So I always
like to think of event delegation as very

286
00:24:18,050 --> 00:24:23,680
responsible parents, like UL with a class
of "plates," and very negligent children

287
00:24:23,680 --> 00:24:28,760
who don't necessarily hear any
instructions from the parents. So what

288
00:24:28,760 --> 00:24:33,510
we're saying is, "Hey, plates. When your
children inputs get clicked,

289
00:24:33,510 --> 00:24:38,790
can you please pass this click on to
them?" Rather than you handling the click

290
00:24:38,790 --> 00:24:43,240
directly, we're just telling you because
you're the only one responsible here.

291
00:24:43,240 --> 00:24:46,290
So that when someone clicks it, if it's
for one of your children,

292
00:24:46,290 --> 00:24:49,140
I don't know if they're your current
children or you're going to make more

293
00:24:49,140 --> 00:24:53,040
children in the future, but if you make
more in the future, make sure you tell

294
00:24:53,040 --> 00:24:57,170
them to handle this click. So you've got
to think of like, responsible parent,

295
00:24:57,170 --> 00:25:01,020
negligent child who doesn't necessarily
know what to do with the click.

296
00:25:01,020 --> 00:25:04,440
So the parent has to tell it what to do.
So let's go back to this code here.

297
00:25:04,440 --> 00:25:08,690
We're going to delete these checkboxes
here if you type that. We just want this

298
00:25:08,690 --> 00:25:15,010
populatedList and addItem with that
listener. We are going to listen for the

299
00:25:15,010 --> 00:25:19,900
click on the unordered list, which is this
itemsList right here.

300
00:25:19,900 --> 00:25:24,790
So we'll say, just duplicate this,
"itemsList.addEventListener."

301
00:25:24,790 --> 00:25:30,230
We're going to listen for a click. When
that happens, we're going to "toggleDone."

302
00:25:30,230 --> 00:25:35,850
Then, inside of here, I'm going to
console.log the E. Let's go back to our

303
00:25:35,850 --> 00:25:42,030
console here. Now, let's click on one of
these. Uh-oh. Okay. That's interesting.

304
00:25:42,030 --> 00:25:45,990
We're getting two different mouse event
handlers. Let's click on this one right

305
00:25:45,990 --> 00:25:52,860
here. Whoa. What's going on here? So we're
getting two different event listeners here

306
00:25:52,860 --> 00:25:57,670
when we click on something. What we can do
a little bit further is if we look at the

307
00:25:57,670 --> 00:26:04,550
target of that event, let's see what we're
working with here, click on Tacos,

308
00:26:04,550 --> 00:26:08,080
ah. So what's happening here is that we're
clicking on the item,

309
00:26:08,080 --> 00:26:16,190
and we're also clicking on the checkbox.
Because our click on Label is in turn

310
00:26:16,190 --> 00:26:22,060
checking the checkbox, which will trigger
a click on the actual input.

311
00:26:22,060 --> 00:26:26,760
Okay, good. Then, what else? Like if we
click on something here that isn't

312
00:26:26,760 --> 00:26:30,510
necessarily the list item or the input,
you see the label is there,

313
00:26:30,510 --> 00:26:36,690
if we click like right here in between,
what do we got? We get the LI.

314
00:26:36,690 --> 00:26:40,720
So you see as we click different items,
the target is going to be a little bit

315
00:26:40,720 --> 00:26:47,100
different. What we want to do here is we
want to check if the target matches the

316
00:26:47,100 --> 00:26:53,320
thing that we're looking for. So we'll
say, "If the e.target.matches," this is

317
00:26:53,320 --> 00:26:58,370
the new API in the browser, "input," and
this is sort of like if you've ever worked

318
00:26:58,370 --> 00:27:04,960
with jquery.isaninput, it's the same thing
as .matches, then we want to return.

319
00:27:04,960 --> 00:27:15,070
Which means they skip this unless it's in
input. Then, let's console.log the target.

320
00:27:15,070 --> 00:27:20,150
There we go. Now, wherever we click, we're
only getting input checks.

321
00:27:20,150 --> 00:27:24,130
Good. So now, we have that working. Again,
that's event delegation,

322
00:27:24,130 --> 00:27:28,580
where we listen for a click on something
higher, and then inside of it we check if

323
00:27:28,580 --> 00:27:32,880
it's the actual thing that we want because
it could trigger on a few different

324
00:27:32,880 --> 00:27:37,780
things. Now, what we want to do is we want
to go to our items array,

325
00:27:37,780 --> 00:27:44,090
and we want to find the one that was
checked and set the done to be "true" or

326
00:27:44,090 --> 00:27:49,750
"false," depending on what state it's in.
So we can first get the index,

327
00:27:49,750 --> 00:27:56,660
and this is why I gave each input a
data-index value, because we can then use

328
00:27:56,660 --> 00:28:03,300
that to reference where it is in the
array. So if we say "const el = e.target",

329
00:28:03,300 --> 00:28:08,150
so put it in its own, now that we have
that element, we can console.log,

330
00:28:08,150 --> 00:28:13,990
el.dataset.index. This is why we put a
data-index on each of the checkboxes.

331
00:28:13,990 --> 00:28:18,230
You check one, it's going to tell you the
index of the corresponding item in the

332
00:28:18,230 --> 00:28:24,850
array. Then, from that we'll take that
index, we'll stick it in its own variable

333
00:28:24,850 --> 00:28:32,780
just for simplicity's sake, and then we'll
take our items with the index and we'll

334
00:28:32,780 --> 00:28:38,990
access the done property. We'll set it to
itself, but this is the trick,

335
00:28:38,990 --> 00:28:44,000
the opposite. So if this is true, it's
going to be the opposite,

336
00:28:44,000 --> 00:28:46,920
which is false. If this is false, it's
going to be the opposite,

337
00:28:46,920 --> 00:28:52,510
which is true. So this is just
flip-flopping between true and false.

338
00:28:52,510 --> 00:28:56,410
Then, we're going to do the same thing
that we did with the stringify,

339
00:28:56,410 --> 00:29:01,590
localStorage right here. Take that. Stick
it right in here. Then,

340
00:29:01,590 --> 00:29:08,750
we will run populateList once more, which
will update the actual visibility part on

341
00:29:08,750 --> 00:29:11,990
here. So we're going to change the
property, we're going to store that in

342
00:29:11,990 --> 00:29:15,680
local storage, and we're going to visually
update what's on our page.

343
00:29:15,680 --> 00:29:20,070
Now when we refresh "tacos", and I should
refresh the page now,

344
00:29:20,070 --> 00:29:24,730
"tacos" is always going to be "true". Why?
Because if we go to our application and we

345
00:29:24,730 --> 00:29:32,060
look at our local storage here, you should
see that "tacos" is "true" and done is

346
00:29:32,060 --> 00:29:35,990
"false". If I were to just mainly change
this to "false" and the first one to

347
00:29:35,990 --> 00:29:40,790
"true", then I refresh the page, you'll
see now "fish" is checked and "tacos".

348
00:29:40,790 --> 00:29:46,800
So every time we make a change, we are
going to mirror that to local storage,

349
00:29:46,800 --> 00:29:51,030
and then rerender the entire list. Or even
better, if you can figure out,

350
00:29:51,030 --> 00:29:56,340
"How do I rerender just that one?" that's
even better. So that's it for today's.

351
00:29:56,340 --> 00:30:01,550
What I will now challenge you to do is
make a button right here that says Clear

352
00:30:01,550 --> 00:30:06,330
All or Check All, or Uncheck All. When you
click that Delete button,

353
00:30:06,330 --> 00:30:10,020
it'll delete all of them. When you click
Check All, it will make them all checked.

354
00:30:10,020 --> 00:30:13,960
When you click Uncheck All, it will
uncheck all of them and mirror it to local

355
00:30:13,960 --> 00:30:17,830
storage, as well as rerun this populated
list. Thanks a lot, and I'll see you in

356
00:30:17,830 --> 00:30:18,780
the next one.

357
00:30:18,780 --> 00:30:20,780
♪ [music] ♪
