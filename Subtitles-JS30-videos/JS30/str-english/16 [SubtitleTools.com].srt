1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:01,520 --> 00:00:04,500
♪ [music] ♪

3
00:00:06,913 --> 00:00:10,104
Today we are going to be learning
all about mouse move

4
00:00:10,104 --> 00:00:13,660
and we're going to recreate this.
I've created this on

5
00:00:13,660 --> 00:00:18,020
flexbox.io. It's a website for one of my
other courses and when you move your

6
00:00:18,020 --> 00:00:24,110
cursor over top of the window, the shadow
sort of follows you around...and just to

7
00:00:24,110 --> 00:00:28,320
show you what's going on here, if we
inspect this right here, you see that I'm

8
00:00:28,320 --> 00:00:33,230
just dynamically updating the style of
that h1 tag depending on where your mouse

9
00:00:33,230 --> 00:00:38,850
is on the actual page. Now, you can also
do this on your phone where I've tapped

10
00:00:38,850 --> 00:00:43,460
into the accelerometer and depending on
how far you're tipping your phone will

11
00:00:43,460 --> 00:00:47,480
also follow you around. So it's what we're
going to be building today. This is,

12
00:00:47,480 --> 00:00:51,420
we kind of go crazy at the end here,
moving it up and down, but we're going to

13
00:00:51,420 --> 00:00:57,820
start with just this which has our
emoji "woah!" and you can edit it.

14
00:00:57,820 --> 00:01:00,917
I've put a content editable on there
and we have a hero here.

15
00:01:00,917 --> 00:01:04,320
So, what we're going to do is we're going
to listen for a mouse move event on our

16
00:01:04,320 --> 00:01:08,580
hero, and when that changes, we are going
to figure out how far and where we should

17
00:01:08,580 --> 00:01:14,930
put the text shadow on this woah here. So
we're going to go into our script tag here

18
00:01:14,930 --> 00:01:22,750
and first we'll grab the hero, and we'll
also grab the text inside of that hero

19
00:01:22,750 --> 00:01:29,617
which is our h1 tag. Now what we need to
do is make a function called shadow.

20
00:01:29,758 --> 00:01:36,520
It's going to pass us the event and then
down here, we're going to take our hero

21
00:01:36,520 --> 00:01:41,700
and add an event listener for mouse move.
When the mouse is moved,

22
00:01:41,700 --> 00:01:46,050
we are going to run the shadow. Good.
Maybe we will just console log the event

23
00:01:46,050 --> 00:01:50,113
inside of here, see what we're dealing
with. Go to our console. Good.

24
00:01:50,113 --> 00:01:55,430
Now anytime I mouse over, what we're going
to do is we get all this information about

25
00:01:55,430 --> 00:01:59,010
what happened and in there, like many of
these other videos, we find out that we

26
00:01:59,010 --> 00:02:05,520
have some information about
the offset left. So let's go into

27
00:02:05,520 --> 00:02:10,950
here, and first of all what we need to do
is get the width and the height of the

28
00:02:10,950 --> 00:02:16,888
thing that we have hovered over which is
the hero. So say const and we're going to

29
00:02:16,888 --> 00:02:21,329
use some ES6 destructuring here because...
let's code it without destructuring

30
00:02:21,329 --> 00:02:27,850
first and then we'll rename it. So
width is equal to hero.offset width,

31
00:02:27,850 --> 00:02:35,020
and height is equal to hero.offset
height. If you're a hotshot,

32
00:02:35,020 --> 00:02:39,970
you can do it in one line. So you can
const offset width is going to be equal to

33
00:02:39,970 --> 00:02:45,380
width and offset height is going to be
equal to height and that is equal.

34
00:02:45,380 --> 00:02:48,900
We destructured that right off the
hero element. So these two things,

35
00:02:48,900 --> 00:02:53,300
these two lines are like this, whatever
you prefer to read. You can do that and

36
00:02:53,300 --> 00:02:57,840
then we also need to get the information
about where the person's cursor was.

37
00:02:57,840 --> 00:03:00,080
So we'll say let and I'll tell you why
we're going to do let instead of

38
00:03:00,080 --> 00:03:05,410
const in just a second, offset x is going
to be equal to the variable x.

39
00:03:05,410 --> 00:03:09,300
Offset y is going to be equal to the
variable y, and we're going to be taking

40
00:03:09,300 --> 00:03:14,470
that off of the event. That's the same
thing as having e.offset x and e.offset y.

41
00:03:14,470 --> 00:03:19,360
We want these values right here,
180 and 100. Now let's console.log x

42
00:03:19,360 --> 00:03:24,840
and y. Hey, look at this. Okay, so go, go
to the top corner and you see zeros.

43
00:03:24,840 --> 00:03:29,790
Go to the very bottom right and you see
700 or however big your actual one is.

44
00:03:29,790 --> 00:03:32,071
So that's looking good.
We're seeing information,

45
00:03:32,071 --> 00:03:38,215
but one weird thing is if you hover
right in the top corner of this h1 tag,

46
00:03:38,215 --> 00:03:42,470
you see that these values are close
to zero. Now, what's going on here?

47
00:03:42,470 --> 00:03:49,290
If we put a background on this element
here, and I hover over top the top corner

48
00:03:49,290 --> 00:03:54,970
of the red, it's giving us values like
zero. Look at, it's like 140 right here,

49
00:03:54,970 --> 00:04:03,010
and then zeros right here. Huh, and what's
happening is that the event,

50
00:04:03,010 --> 00:04:09,190
even though we're listening for the mouse
move on the hero, if there are children

51
00:04:09,190 --> 00:04:13,710
elements inside of the hero it's going to
give us the x and the y of the actual

52
00:04:13,710 --> 00:04:18,855
element that we hovered which is kind
of a pain. So we need to do a little bit

53
00:04:18,855 --> 00:04:25,650
of normalization here to say okay, if the
thing that we're actually hovering is this

54
00:04:25,650 --> 00:04:32,150
h1 instead of the hero, then modify the x
and the y values, so that they're going to

55
00:04:32,150 --> 00:04:39,650
be consistent across all of them. So what
we do here is we say if this does not

56
00:04:39,650 --> 00:04:46,830
equal event.target, then...hold on,
what is this? Console log this.

57
00:04:46,830 --> 00:04:51,127
This is going to be a div with a class of
hero. Okay. What is going to be

58
00:04:51,127 --> 00:04:56,070
event.target? The target is going to be
the thing that it actually triggered on,

59
00:04:56,070 --> 00:04:59,940
whereas this is going to be the thing that
you listened on. So it's always going to

60
00:04:59,940 --> 00:05:03,050
be hero for this, but
the target, what it got

61
00:05:03,050 --> 00:05:08,290
triggered on will sometimes change. So
hero, hero, hero. Watch this.

62
00:05:08,290 --> 00:05:14,990
Ah, I'm hovering over here and you see
that I see this is equal to the hero but

63
00:05:14,990 --> 00:05:20,560
the target is equal to the h1. So if those
two things are not the same,

64
00:05:20,560 --> 00:05:24,260
which is what this if statement is doing
right here, then what we'll need to do,

65
00:05:24,260 --> 00:05:31,453
we say x equals x plus event
or e.target.offset left

66
00:05:31,453 --> 00:05:37,510
and the same we'll do with y and
offset top. So essensially what we're

67
00:05:37,510 --> 00:05:41,370
doing is we're figuring out if someone
hovers in the top left hand corner of

68
00:05:41,370 --> 00:05:47,613
woah, this h1, we're going to add the
like two pixels that it's given us plus

69
00:05:48,230 --> 00:05:52,257
whatever it is from the left and whatever
it is from the top. So dealing with x and

70
00:05:52,257 --> 00:05:57,917
y is a bit of a headache in Javascript and
this is the best fix that we can find

71
00:05:57,917 --> 00:06:02,500
to work with that. So now if I console log
x and y and that, by the way that is why I

72
00:06:02,500 --> 00:06:06,196
used let, because it's possible that we
needed to reassign the values here.

73
00:06:07,321 --> 00:06:11,550
Now if I hover over the top left hand
corner you see those values aren't back to

74
00:06:11,550 --> 00:06:16,850
zero. It doesn't change depending on where
we are. Good. Now what we need to do is

75
00:06:16,850 --> 00:06:23,840
figure out how far the text shadow should
actually go. So we need something that I

76
00:06:23,840 --> 00:06:28,459
like to call a walk. If you look at this,
if my cursor is all the way at the top

77
00:06:28,459 --> 00:06:33,620
left, how much over and
back should it go? If it's all

78
00:06:33,620 --> 00:06:37,000
the way over, how much over should that
go, how much all the way down should it

79
00:06:37,000 --> 00:06:40,820
go, and I like to call that the walk. How
many pixels, at its most,

80
00:06:40,820 --> 00:06:48,750
should it be stretched? So let's go up
here, and we'll say const walk equals,

81
00:06:48,750 --> 00:06:53,890
let's make it 100 pixels. Just 100, and
we're going to use that in our math

82
00:06:53,890 --> 00:07:00,932
equation. So now we will say const x walk
equal to...and here is where it gets a

83
00:07:00,932 --> 00:07:07,750
little bit tricky. Because if it was all
the way over, like right here,

84
00:07:07,750 --> 00:07:11,540
it's not going to be 200 pixels, and if
it's all the way over here it's not going

85
00:07:11,540 --> 00:07:15,570
to be zero. If it's all the way
over it's going to be plus 100,

86
00:07:15,570 --> 00:07:20,110
and if it's all the way over here it's
going to be negative 100.

87
00:07:20,110 --> 00:07:29,510
So we say x walk equals x divided by the
width times the walk minus the walk

88
00:07:29,510 --> 00:07:32,649
divided by two.
What? What are we doing here?

89
00:07:32,649 --> 00:07:39,850
So essentially what that is, if 100 is as
high as we'll go, 0 is not as low as we'll

90
00:07:39,850 --> 00:07:46,730
go, if 100 is our walk, then 50 should be
as high as we go and negative 50 is as low

91
00:07:46,730 --> 00:07:51,210
as we should go. So our walk is 100 but we
want to go from 50 to negative 50,

92
00:07:51,210 --> 00:07:56,140
and that's what this little bit of math is
doing for us here. It's sort of offsetting

93
00:07:56,140 --> 00:08:00,040
it so we go to plus 50 and
negative 50 instead of 0

94
00:08:00,040 --> 00:08:06,540
and plus 100. Then we can just swap out
this x walk, y, with this is going to be

95
00:08:06,540 --> 00:08:12,612
height, then we should console log our x
walk and our y walk. See what we got here.

96
00:08:13,512 --> 00:08:18,710
Ah, there we go. So now we've got a bunch
of pixel values, which is giving us...and

97
00:08:18,710 --> 00:08:25,280
those are a little bit long, so we could
pop a quick math.round around them.

98
00:08:25,280 --> 00:08:28,150
There we go. Now it's giving us some
good...if you go all the way to the top

99
00:08:28,150 --> 00:08:32,015
left, you get negative 50, negative 50,
and all the way to the bottom right

100
00:08:32,015 --> 00:08:36,970
you're getting plus 50, plus 50. So now
that's all left to us is we take our text,

101
00:08:36,970 --> 00:08:41,950
and we can grab the style attribute and
set the text shadow to be..and I'm going

102
00:08:41,950 --> 00:08:45,906
to use backtexts here. It's going to
be...and the way that the text-shadow

103
00:08:45,906 --> 00:08:52,200
works is it's, like, 10px, 10px,
blur, which is going to be 0,

104
00:08:52,200 --> 00:08:55,780
and then you want to give itself like red.
Something like that.

105
00:08:55,780 --> 00:09:00,560
However, this 10px is not going to be
10px. It's going to be x walk.

106
00:09:00,560 --> 00:09:07,640
This 10px is going to be y walk and we can
leave this red as we have it here.

107
00:09:07,640 --> 00:09:14,240
So give that a refresh, and woah! It's
working. So give it an inspect.

108
00:09:14,240 --> 00:09:18,805
You see how those values are now being
updated as we move? Negative 50,

109
00:09:18,805 --> 00:09:24,110
negative 50. 50, 50. We're moving it all
around. That's pretty cool and what you

110
00:09:24,110 --> 00:09:30,000
can also do with that is just do multiple
colors as you like. So RGBA

111
00:09:30,000 --> 00:09:40,190
255, 0, 255, 0.7, something like that, and
then comma. We'll do it again,

112
00:09:40,190 --> 00:09:47,017
which x walk times negative one will make
that one negative, and we'll make this

113
00:09:47,017 --> 00:09:52,263
color to be zero. Just going around the
spectrum here. Take off that leading

114
00:09:52,263 --> 00:09:56,931
comma. There we go. So now one of them is
going the opposite way of the way it would

115
00:09:56,931 --> 00:09:59,987
go. So you go left. One of them goes left.
The other goes right.

116
00:09:59,987 --> 00:10:08,800
Do it again with...we want to give that
first one our y walk value and this one

117
00:10:08,800 --> 00:10:15,240
our x walk times negative one, and
finally, figure out y walk times negative

118
00:10:15,240 --> 00:10:22,612
one and our x walk. It changes colors
around so they're not exactly the same.

119
00:10:22,612 --> 00:10:30,100
0, 255, 0, and 0, 0, 255. Take
off that last trailing comma,

120
00:10:30,100 --> 00:10:35,480
and there we go. We see all of them going
every which that way we have,

121
00:10:35,480 --> 00:10:40,910
looking kind of fun. You can do some crazy
stuff by...go up, change your walk value,

122
00:10:40,910 --> 00:10:45,679
where did we set that? Here and if you
change that to 500 and it goes woo!

123
00:10:45,679 --> 00:10:49,534
All over the place. You can set
some blur modes in CSS

124
00:10:49,534 --> 00:10:52,560
so that they change each
other when they overwrite.

125
00:10:52,560 --> 00:10:55,990
There's all sort of fun stuff we can do
there. The real big thing that we learned

126
00:10:55,990 --> 00:11:00,300
there is that when you're dealing with
events, you can use offset x and offset y

127
00:11:00,300 --> 00:11:07,330
to get the position where your cursor is.
However, if you have nested elements

128
00:11:07,330 --> 00:11:11,020
inside of that thing, you sometimes will
need to do a little bit of math to deal

129
00:11:11,020 --> 00:11:15,760
with it. Hopefully, you enjoyed that, and
it wasn't too tough on the old noggin.

130
00:11:15,760 --> 00:11:16,986
I will see you tomorrow.

131
00:11:17,527 --> 00:11:20,536
♪ [music] ♪
