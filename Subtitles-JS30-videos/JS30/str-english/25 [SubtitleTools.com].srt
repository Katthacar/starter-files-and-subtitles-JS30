1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:01,404 --> 00:00:03,558
♪ [music] ♪

3
00:00:07,698 --> 00:00:12,755
Quick, short, and sweet lesson today, and
it's going to be about .addEventListener.

4
00:00:12,755 --> 00:00:16,220
We're not going to be building anything
huge here, but there's a couple concepts

5
00:00:16,220 --> 00:00:20,210
that I need to make sure that we all get
down pat, because we've been using these

6
00:00:20,210 --> 00:00:24,120
.addEventListeners throughout all these
videos, but there's going to be edge cases

7
00:00:24,120 --> 00:00:29,220
that you run into where these things are
going to be helpful. So what I've got here

8
00:00:29,220 --> 00:00:33,915
is I've got three divs. I've got a div
with a class of one, two, and three.

9
00:00:33,915 --> 00:00:38,186
and they're all nested inside
of each other. What I want to do is

10
00:00:38,186 --> 00:00:44,592
explain to you a couple things about
propagation, bubbling, event capturing,

11
00:00:44,592 --> 00:00:50,813
as well as using this new property called
once. So go into your scrip tag here,

12
00:00:50,813 --> 00:00:54,317
and I want to just listen for a click on
all of these divs, so we're going to

13
00:00:54,317 --> 00:00:59,628
select all those divs, and we're going to
make a function called logText.

14
00:00:59,628 --> 00:01:05,735
Fix in the event, and we're just going to
console.log(this.classList.value).

15
00:01:05,735 --> 00:01:07,274
When somebody clicks a div,

16
00:01:07,274 --> 00:01:11,079
we're going to log it, so we'll say take
all the divs, loop over each one,

17
00:01:11,079 --> 00:01:16,516
we're going to take the div, and we're
going to add.EventListener click,

18
00:01:16,516 --> 00:01:20,890
and when that happens, we're going
to call LogText. This is the one...

19
00:01:20,890 --> 00:01:24,960
You may see me autocompleting this, and
we have this capture?: boolean right here.

20
00:01:24,960 --> 00:01:27,834
That's really what we're going to be
looking at here today, we'll leave that

21
00:01:27,834 --> 00:01:30,491
there for now. So give it a save.

22
00:01:31,230 --> 00:01:36,660
Now, I'm going to click on, and obviously
this purple one is div with a class of

23
00:01:36,660 --> 00:01:43,560
one, the misty rose one is two, and the
coral one is three. So when I click on the

24
00:01:43,560 --> 00:01:47,420
coral one, what is going to log? Don't
cheat, just tell yourself what will

25
00:01:47,420 --> 00:01:53,750
console that log? Click it, three, two,
and one. Wait, I just clicked on the third

26
00:01:53,750 --> 00:01:59,608
one, which is the very most inner one,
but I also console.logged two and one.

27
00:02:00,384 --> 00:02:03,610
That's weird. Well, also if you
console.log this, you'll see the actual

28
00:02:03,610 --> 00:02:09,028
elements themselves, three, two,
and one. So what's going on here?

29
00:02:09,190 --> 00:02:12,510
Well, what is happening is if we go
to our Elements panel here,

30
00:02:12,510 --> 00:02:17,079
and we go to the div that we clicked on,
we clicked on three, but we really also

31
00:02:17,079 --> 00:02:20,373
clicked on two, because it wraps around
it, and we also clicked on one,

32
00:02:20,373 --> 00:02:25,150
we also clicked on the body, we also
clicked on the html tag, we also clicked

33
00:02:25,150 --> 00:02:29,600
on the current tab, and we also clicked on
Google Chrome, and we also clicked on our

34
00:02:29,600 --> 00:02:33,520
OS X operating system, and we also clicked
on the world, and it just keeps zooming

35
00:02:33,520 --> 00:02:38,182
out and out and out. So that's the
concept of something called bubbling,

36
00:02:38,182 --> 00:02:43,358
where the browser will figure out what
you clicked on, but it will also trigger

37
00:02:43,358 --> 00:02:48,970
clicks up every...and they'll ripple
all the way up. So case in point,

38
00:02:48,970 --> 00:02:58,460
if I take document.body and I add the
EventListener of click, and when that

39
00:02:58,460 --> 00:03:03,634
happens, I'm going to logText, and we
have to give our body a class here,

40
00:03:03,634 --> 00:03:07,745
so class="bod". Now watch, I'm
going to click on the coral one,

41
00:03:07,745 --> 00:03:13,700
three, two, one, and bod. So what's
happening is that when you make a click,

42
00:03:13,700 --> 00:03:19,010
it will ripple all the way up to the top
of the document and trigger clicks on

43
00:03:19,010 --> 00:03:22,690
those elements as well. Now, you don't
always see them, because you're not

44
00:03:22,690 --> 00:03:26,408
necessarily listening for a click on those
elements, but if you're listening for

45
00:03:26,408 --> 00:03:30,555
a click on multiple nested elements, in
this case, we're listening for a click on

46
00:03:30,555 --> 00:03:35,486
three, two, one, and bod, then
it's going to trigger a click

47
00:03:35,486 --> 00:03:37,800
on all of those, right there.

48
00:03:37,800 --> 00:03:41,724
So I want to explain to you how this
actually works in JavaScript.

49
00:03:41,724 --> 00:03:47,552
The way that it works in modern
browsers is that the browser will first

50
00:03:47,552 --> 00:03:51,407
do something called a capture, which
means that when you click on the element,

51
00:03:51,407 --> 00:03:56,029
it's going to ripple down. It's going to
say, "Okay, you clicked on the body,

52
00:03:56,029 --> 00:04:00,400
you clicked on one, you clicked on two,
and you clicked on three." So it actually

53
00:04:00,400 --> 00:04:04,964
goes from the top down, and then it
captures all of those events,

54
00:04:04,964 --> 00:04:09,732
and then it starts at the bottom, and then
starts doing something called a bubble.

55
00:04:09,732 --> 00:04:14,594
So the capture goes from top down, and
then the events...the events haven't fired

56
00:04:14,594 --> 00:04:19,019
yet. It just captures where you clicked,
and is storing them. Then it will start to

57
00:04:19,019 --> 00:04:23,510
bubble up, which means that it's
triggering the events as you go up.

58
00:04:23,510 --> 00:04:27,363
So it says, "Okay, we've done figuring out
what you've clicked on all the way down,

59
00:04:27,363 --> 00:04:31,684
now I'm going to start firing off
those click events," on three,

60
00:04:31,684 --> 00:04:36,960
then two, then one, then body, and
anything else you're listening for.

61
00:04:36,960 --> 00:04:41,630
So if we go to our .addEventListener here,
and let's get rid of this document.body

62
00:04:41,630 --> 00:04:44,620
here, after our function [inaudible
00:04:43] a third argument,

63
00:04:44,620 --> 00:04:50,707
which is an options object, and we say
capture is going to be equal to true,

64
00:04:50,707 --> 00:04:55,817
what that will then do is when I click, we
go one, two, three, and what's happening

65
00:04:55,817 --> 00:05:01,277
is that this function, logText, is not
going to get run on the bubble up,

66
00:05:01,277 --> 00:05:05,437
it's going to get run on the capture down.
So we go to the Elements here,

67
00:05:05,437 --> 00:05:09,181
it's going to say, "Oh, they clicked on
one, fire it. They clicked on two,

68
00:05:09,181 --> 00:05:13,909
fire it. They clicked on three, fire it."
So that is what capture means

69
00:05:13,909 --> 00:05:20,127
is that we will run the function on the
way down rather than on the way up.

70
00:05:20,127 --> 00:05:24,947
Now let me put that back to false. By
default, it is false, so that's the normal

71
00:05:24,947 --> 00:05:26,416
version that we have here.

72
00:05:26,416 --> 00:05:30,435
Another thing we have is called stop
propagation. So we just talked about

73
00:05:30,435 --> 00:05:34,751
events bubble up, meaning that if you
click on the innermost one,

74
00:05:34,751 --> 00:05:40,407
it will also trigger an event on the
parent and that parent as well.

75
00:05:40,407 --> 00:05:44,591
However, what you could then do is
you take your event in your function,

76
00:05:44,591 --> 00:05:50,960
and you call e.stopPropagation(),
and what that will do is it will say,

77
00:05:50,960 --> 00:05:56,135
"Stop bubbling this event up. I clicked
the one that I actually wanted."

78
00:05:56,135 --> 00:06:01,432
So now if I go in here, and click on
the middle one, I just see three,

79
00:06:01,432 --> 00:06:07,990
then two, and then one. Why is that?
Because we run... What happens is the

80
00:06:07,990 --> 00:06:13,778
browser starts at the very lowest one,
it runs that function, and then we say

81
00:06:13,778 --> 00:06:20,952
stopPropagation, which essentially means
stop bubbling! and it will no longer

82
00:06:20,952 --> 00:06:25,680
trigger events on the parents on the way
on up. So that's stopPropagation. You can

83
00:06:25,680 --> 00:06:28,607
wrap that in an if statement if
you needed to get the middle one,

84
00:06:28,607 --> 00:06:33,060
or something like that, but that's what
stopPropagation does. You can also use

85
00:06:33,060 --> 00:06:38,280
that in conjunction with your on your way
down, right here, if I were to click on

86
00:06:38,280 --> 00:06:44,314
the middle one, or sorry, if I were to
click on three, what are we going to get

87
00:06:44,314 --> 00:06:51,257
with capture: true and stopPropagation?
Just one. Why? Because capture makes it go

88
00:06:51,257 --> 00:06:56,757
on the way down, one, and then we run
stopPropagation, which stops it from

89
00:06:56,757 --> 00:06:59,013
going down even further.

90
00:06:59,013 --> 00:07:02,844
Last thing I wanted to show you was
something called once, and this is very

91
00:07:02,844 --> 00:07:06,505
new in the browser we have here. So I'm
just going to console.log that propagation

92
00:07:06,505 --> 00:07:11,952
out and bring this capture back to false,
just so we can get our defaults going back

93
00:07:11,952 --> 00:07:16,926
here, three, two, one. We also have an
option called once. If you set that to

94
00:07:16,926 --> 00:07:22,390
true, what will happen is it will listen
for a click and then unbind itself,

95
00:07:22,390 --> 00:07:25,814
and unbinding itself is
the same thing as saying

96
00:07:25,814 --> 00:07:33,119
div.removeEvent.Listener('click', logText.

97
00:07:33,119 --> 00:07:37,909
So it will listen for a click once,
and then unbind itself

98
00:07:37,909 --> 00:07:42,126
so that there's no future clicks on it.
Now if I click on one of these here,

99
00:07:42,126 --> 00:07:48,027
here we go, I'm clicking as many as I can.
It ran once, it fired all those events,

100
00:07:48,027 --> 00:07:53,278
but it will never run again, until I rerun
the page. So that could be helpful if

101
00:07:53,278 --> 00:07:56,685
you have a button. Let's just make
ourselves a quick button here,

102
00:07:56,685 --> 00:08:03,792
and we'll grab it, and you only ever
wanted somebody to click that button once,

103
00:08:03,792 --> 00:08:09,545
we just say button.addEventListener click,
and then when that happens we'll run

104
00:08:09,545 --> 00:08:13,639
a quick function here that just
console.logs click, watch this.

105
00:08:13,639 --> 00:08:17,000
So we've got this button, if I click it
over and over and over and over,

106
00:08:17,000 --> 00:08:18,030
we're going to get it,

107
00:08:18,030 --> 00:08:23,410
but if I were to add that third options
argument here, where we have once

108
00:08:23,410 --> 00:08:29,174
is equal to true, I should only be able
to click this once and never again.

109
00:08:29,174 --> 00:08:34,066
And where I've used that specifically is
in store checkouts, where you do not wish

110
00:08:34,066 --> 00:08:40,174
for someone to click that button more than
once, you can unbind it and stop them from

111
00:08:40,174 --> 00:08:41,920
clicking it multiple times.

112
00:08:41,920 --> 00:08:45,738
So hopefully you learned a few things
there. I know that propagation and

113
00:08:45,738 --> 00:08:51,058
bubbling and capturing, all of those words
used to be very, very confusing to me.

114
00:08:51,058 --> 00:08:55,580
It's not something you use every day, so
it's one of those things where you just

115
00:08:55,580 --> 00:08:58,977
sort of put off from learning, so
hopefully, you spent a couple minutes

116
00:08:58,977 --> 00:09:02,790
and just learned exactly what propagation
and bubbling and all of that stuff does.

117
00:09:02,790 --> 00:09:04,382
Thanks, and I'll see you tomorrow.
