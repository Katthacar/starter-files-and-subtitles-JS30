1
00:00:00,000 --> 00:00:03,000
♪ [music] ♪

2
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

3
00:00:07,000 --> 00:00:10,900
Today we are going to be learning about
geolocation and not just getting the

4
00:00:10,900 --> 00:00:15,253
latitude and longitude with geolocation,
although we can do that if you like.

5
00:00:15,253 --> 00:00:20,190
But there is also information that comes
along with geolocation, and that is the

6
00:00:20,190 --> 00:00:23,810
heading, which is essentially
like a compass, or how

7
00:00:23,810 --> 00:00:28,130
many degrees of north is the person
currently at. And it also will tell us the

8
00:00:28,130 --> 00:00:32,240
speed at which somebody is
running, which is kind of cool.

9
00:00:32,240 --> 00:00:36,770
In Chrome, we can fake coordinates,
but we cannot fake heading,

10
00:00:36,770 --> 00:00:42,030
and we cannot fake speed, so really the
only way that I found to do this so far is

11
00:00:42,030 --> 00:00:45,900
with the iOS Simulator. And if you don't
have a Mac, you might have to sit tight on

12
00:00:45,900 --> 00:00:50,405
this one, or you can run it on your phone,
and then start running down the street to

13
00:00:50,405 --> 00:00:54,060
actually test it, because you need
some real data to get it going.

14
00:00:54,060 --> 00:00:58,970
So I've downloaded Xcode here, and if you
don't have a Mac, I maybe can do this with

15
00:00:58,970 --> 00:01:04,920
Android, I'm not totally sure. You go to
Xcode, Open Developer Tool and then

16
00:01:04,920 --> 00:01:11,644
Simulator, and then you can change the
hardware from hardware device iOS 10, and

17
00:01:11,644 --> 00:01:14,118
then you might have to download
some of these things first, so I've got

18
00:01:14,118 --> 00:01:16,167
it open on an iPhone 7 Plus.

19
00:01:16,167 --> 00:01:22,350
Now the next thing is just like our last
two, you cannot run access to your users

20
00:01:22,350 --> 00:01:27,460
webcam, to their microphone and now you
cannot access their geolocation unless

21
00:01:27,460 --> 00:01:31,500
you're on a secure origin. And that hasn't
been a problem for us so far because what

22
00:01:31,500 --> 00:01:36,590
we've been doing is we did our npm
install here, which will install just that

23
00:01:36,590 --> 00:01:42,220
BrowserSyncs, and it will do a npm start
for us. Now that will give us a localhost

24
00:01:42,220 --> 00:01:48,120
which is a secure origin, but because I
want to open it up on a different device,

25
00:01:48,120 --> 00:01:54,160
it's going give us a external IP
address or internal IP address, sorry.

26
00:01:54,160 --> 00:02:00,945
It'll say https://192.168.1.107, and that
is the address that we need to visit on

27
00:02:00,945 --> 00:02:06,706
our devices. Now BrowserSync ships with
what's called a self-signed certificate,

28
00:02:06,706 --> 00:02:11,590
which allows you to have https on your
computer. It's still going to throw this

29
00:02:11,590 --> 00:02:16,570
really scary warning, but that's because
it is a self-signed certificate, and it

30
00:02:16,570 --> 00:02:21,080
doesn't trust it. So you have to go to
Advanced, and you have to proceed to the

31
00:02:21,080 --> 00:02:24,476
localhost in order to get that to work,
it's still going to cross us out,

32
00:02:24,476 --> 00:02:28,690
but that is standard for getting it
working on your local computer.

33
00:02:28,690 --> 00:02:33,620
So what we want to do is actually copy
this https here, open up your Safari on

34
00:02:33,620 --> 00:02:38,560
your simulator here and visit that
website. Now it's going to yell at you

35
00:02:38,560 --> 00:02:42,280
that this is not a trusted...cannot verify
the identity. You want to click on

36
00:02:42,280 --> 00:02:48,210
continue there, and then it's going to
serve it over in a secure origin,

37
00:02:48,210 --> 00:02:51,930
and then we go to our index-FINISHED
to see where we got. Now

38
00:02:51,930 --> 00:02:55,980
it's going to ask you, "Can you
access your location?" You say,

39
00:02:55,980 --> 00:03:00,160
"Yes," I want to have access to that
location ask me a second time,

40
00:03:00,160 --> 00:03:02,550
oh, and there we go,
so what's happening

41
00:03:02,550 --> 00:03:07,490
here is that I've gone
to my simulator here.

42
00:03:07,490 --> 00:03:13,670
You go to Debug, Location and you can
select a number of different jaunts,

43
00:03:13,670 --> 00:03:18,360
so this is simulating somebody running,
having a bike ride at the Apple Campus,

44
00:03:18,360 --> 00:03:23,993
walking around, I guess, or a freeway
drive. And it's going to simulate updating

45
00:03:23,993 --> 00:03:29,290
the location as well as the actual speed.
That's why we need to use this iOS

46
00:03:29,290 --> 00:03:33,387
Simulator in here, so that's how that
one works, but we want to go back

47
00:03:33,387 --> 00:03:36,950
to our index-START.

48
00:03:36,950 --> 00:03:43,380
One other thing you might want to do is to
open up Safari, and the beauty of Safari

49
00:03:43,380 --> 00:03:49,200
is that you can take Safari, you can go to
Develop. You can find, like, this is the

50
00:03:49,200 --> 00:03:53,750
phone that I'm using right now, but you
can also have your simulator,

51
00:03:53,750 --> 00:04:00,279
and you can see, you can open up Dev Tools
for whatever it is that's currently open

52
00:04:00,279 --> 00:04:03,300
on your phone or in the simulator that's
pretty cool. So that's going to be

53
00:04:03,300 --> 00:04:07,056
helpful to have that console
window open for us just in case

54
00:04:07,056 --> 00:04:09,276
we need to see if we
have any errors now, so

55
00:04:09,276 --> 00:04:13,800
let's go back to our script tags here, and
let's get going with coding this. First

56
00:04:13,800 --> 00:04:19,680
thing that you need to do is to select
both the arrow, which is this right here,

57
00:04:19,680 --> 00:04:25,190
and the kilometers per hour that we are
running on, so go to our script tag here

58
00:04:25,190 --> 00:04:29,330
and we'll say const arrow equals
document.querySelector.('arrow').

59
00:04:31,600 --> 00:04:34,929
Do the same thing for speed.
Now that we have that,

60
00:04:34,929 --> 00:04:40,680
we need to listen
for the user's position,

61
00:04:40,680 --> 00:04:46,480
so we access that on
navigator.geolocation., and now there's

62
00:04:46,480 --> 00:04:52,350
two ones here there is watchPosition, and
there is getCurrentPosition.

63
00:04:52,350 --> 00:04:55,306
We want watchPosition because
getCurrentPosition will just give us the

64
00:04:55,306 --> 00:05:00,067
one, and watchPosition is going to just
watch it over time, and it's just going to

65
00:05:00,067 --> 00:05:03,974
give us data as frequently as we need it.
The person's not moving around too much,

66
00:05:03,974 --> 00:05:07,687
it's going to give us less frequent
updates. If the person is flying down the

67
00:05:07,687 --> 00:05:11,528
highway, it's going to give us
a lot more frequent updates, so

68
00:05:11,528 --> 00:05:16,220
we have that data that comes in here, and
it's going to run a function, and let's

69
00:05:16,220 --> 00:05:20,110
just console.log the data to see what
we've got. Then give that a save,

70
00:05:20,110 --> 00:05:24,860
it's going to ask the user location, and
then I'm going to open up my Safari Dev

71
00:05:24,860 --> 00:05:29,266
Tools here, and here we go look at this.
This is data that's streaming in, and this

72
00:05:29,266 --> 00:05:34,940
is giving us this geoposition, I'm
going to go bump the size up here.

73
00:05:34,940 --> 00:05:37,800
Inside of that, we have a timestamp
as to when that happened

74
00:05:37,800 --> 00:05:40,740
as well as coordinates
for what happened.

75
00:05:40,740 --> 00:05:46,820
So here, we've got accuracy, and I believe
that is number of meters it is accurate

76
00:05:46,820 --> 00:05:52,120
to. We've got heading, this is really
good, so that is the numbered of degrees

77
00:05:52,120 --> 00:05:57,130
relative to North that we are, and then
we've got the latitude and longitude to

78
00:05:57,130 --> 00:06:00,340
where they are, you could put that on a
map if you want, and then speed,

79
00:06:00,340 --> 00:06:05,717
and that's coming in at kilometers per
hour. So if you're some weirdo from the

80
00:06:05,717 --> 00:06:10,283
states that uses miles, you got
to do the math, but us, the rest

81
00:06:10,283 --> 00:06:12,663
of the world, will use kilometers.

82
00:06:12,663 --> 00:06:19,170
Now we've got this data here, and what we
simply have to do now is we can update it,

83
00:06:19,170 --> 00:06:29,368
so we say speed.textContent equals
data.coords.speed. Now when we refresh

84
00:06:29,368 --> 00:06:33,430
that sucker, see that we're automatically
seeing this, and if you wanted too,

85
00:06:33,430 --> 00:06:41,010
you could pop it in a Math.round,
and that would just give you 34.

86
00:06:41,010 --> 00:06:44,948
I find that it doesn't change very often,
so you're not sure if it's working or not,

87
00:06:44,948 --> 00:06:50,180
so I like to keep the decimal places
there just so that we can see exactly how

88
00:06:50,180 --> 00:06:52,310
fast they're changing. That's good.

89
00:06:52,310 --> 00:06:59,250
Now what we need to do is rotate this
compass right here, which is our arrow,

90
00:06:59,250 --> 00:07:04,600
depending on where we are, and we simply
just take the arrow, and we apply the

91
00:07:04,600 --> 00:07:10,070
style.transform, and this is just a CSS
transform, and that's going to rotate

92
00:07:10,070 --> 00:07:15,940
and normally be, like, 20 degrees, let's
try that. So you see what happened,

93
00:07:15,940 --> 00:07:19,738
that it rotated it 20 degrees, but we
don't want to rotate it 20 degrees, we

94
00:07:19,738 --> 00:07:24,048
want to rotate it, the
data.coords.heading,

95
00:07:24,048 --> 00:07:26,675
and that is the number of
degrees relative of north,

96
00:07:26,675 --> 00:07:30,750
and it's already 360 base, so you
don't have to do any math on that.

97
00:07:30,750 --> 00:07:35,359
Give it a save, and now you see that
this thing is slightly turning depending

98
00:07:35,359 --> 00:07:38,746
on where the person actually
currently is in their jog,

99
00:07:38,746 --> 00:07:41,435
and it will just tilt
itself as we go along.

100
00:07:41,435 --> 00:07:44,860
Last thing we need to do here is if
someone... This right here is called the

101
00:07:44,860 --> 00:07:49,610
success callback, so when someone
successfully gives you access to it, this

102
00:07:49,610 --> 00:07:53,910
will run, but what happens if they say,
"No." Then what we have to do is run a new

103
00:07:53,910 --> 00:08:00,908
function here, which is our error, and
we'll just console.log or console.err that

104
00:08:00,908 --> 00:08:08,330
error message, and then maybe, like, alert
to the user, "Hey, you gotta allow that to

105
00:08:08,330 --> 00:08:13,480
happen!!!" Or whatever it is, and then you
have to display instructions to the user

106
00:08:13,480 --> 00:08:17,406
on how to re-enable it if
they've blocked it from happening.

107
00:08:17,406 --> 00:08:19,710
Give that a save, BrowserSync.

108
00:08:19,710 --> 00:08:23,690
We can switch it around, change our
location, let's go on a run instead.

109
00:08:23,690 --> 00:08:28,090
We're going a lot slower, and there's a
lot more turns in something like that,

110
00:08:28,090 --> 00:08:32,290
so that's pretty cool. You can look at
the latitude and longitude inside of this

111
00:08:32,290 --> 00:08:37,890
data.coords if you like, maybe if you want
to try do a Google Map, but this is a

112
00:08:37,890 --> 00:08:41,688
framework-free series, so there's not
too much we could do with the latitude and

113
00:08:41,688 --> 00:08:44,285
longitude. Hopefully you enjoy
that, and I'll see you tomorrow.

114
00:08:44,285 --> 00:08:47,200
♪ [music] ♪
