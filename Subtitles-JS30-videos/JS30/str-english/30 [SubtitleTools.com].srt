1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:01,304 --> 00:00:04,451
♪ [music] ♪

3
00:00:07,810 --> 00:00:11,730
Here we are on day 30, and to have a
little bit of fun today we are going,

4
00:00:11,730 --> 00:00:15,120
well like you didn't have fun the whole
time. But we're going to be building a

5
00:00:15,120 --> 00:00:18,310
game so you can have fun and play it and
just have a great time.

6
00:00:18,310 --> 00:00:25,330
So what we are building is Whack-a-mole,
and what happens is when you run the game

7
00:00:25,330 --> 00:00:30,620
you're going to get these little critters
popping up in random holes for for random

8
00:00:30,620 --> 00:00:34,410
amounts of time. And then when
you click them you get a point,

9
00:00:34,410 --> 00:00:39,190
you sort of have to follow it along with
your mouse. So there's a couple things we

10
00:00:39,190 --> 00:00:42,700
need to know here, the game itself is
going to be 10 seconds long,

11
00:00:42,700 --> 00:00:49,440
but which hole the mole pops up in and for
how long that mole peeps his head up from

12
00:00:49,440 --> 00:00:54,090
the ground is totally random, it's all
going to be between like 200 milliseconds

13
00:00:54,090 --> 00:00:59,020
and a couple of seconds, and then the mole
hill that it's going to pop up from is

14
00:00:59,020 --> 00:01:04,350
also going to be totally random as well.
So I've gone here and I've gone ahead and

15
00:01:04,350 --> 00:01:08,420
selected all of the holes, I've gone ahead
and selected the scoreboard which is the

16
00:01:08,420 --> 00:01:12,400
seven right here, and I've gone ahead and
selected all the moles.

17
00:01:12,400 --> 00:01:15,990
So look at our HTML here, you've got your
holes, you've got your moles in your

18
00:01:15,990 --> 00:01:22,400
holes, and were ready to roll with our
moles in our holes. So we first need a

19
00:01:22,400 --> 00:01:27,330
function that's going to give us a random
amount of time between hover minimum and

20
00:01:27,330 --> 00:01:32,610
maximum. So we're going to say, "function
randTime" and that's going to take a

21
00:01:32,610 --> 00:01:40,600
minimum and a maximum. And that will
return a "Math.random() * (max-min) +

22
00:01:40,600 --> 00:01:44,670
min;" And we've done this whole offset
thing a couple of times,

23
00:01:44,670 --> 00:01:48,440
now I'm not going to explain it again.
That should give us a function that if we

24
00:01:48,440 --> 00:01:54,950
open up in our browser here and we run
"randTime" and if we go between 20

25
00:01:54,950 --> 00:01:59,400
milliseconds and 2 seconds, it's just
going to give us a random amount of

26
00:01:59,400 --> 00:02:05,130
millisecond. We could probably also pop a
"Math.round" around that just so we can

27
00:02:05,130 --> 00:02:11,370
get a nice, clean number of milliseconds
back. There we go, now we're going to get

28
00:02:11,370 --> 00:02:14,890
a random amount of time that it's
going to be popping itself up.

29
00:02:14,890 --> 00:02:18,560
So that's one function, that's sort of a
bit of a utility. Then we needed other

30
00:02:18,560 --> 00:02:23,580
function that's going to pick a random
hole for the mole to pop up from.

31
00:02:23,580 --> 00:02:31,670
So, "function randomHole()" and that is
going to take in a list of holes,

32
00:02:31,670 --> 00:02:36,770
which is going to be, in our case it's
going to be this holes that we have here,

33
00:02:36,770 --> 00:02:40,880
however this could be any list of DOM
Elements. Essentially this is just a get

34
00:02:40,880 --> 00:02:47,080
me a random DOM Element function there.
And what we're going to do here is,

35
00:02:47,080 --> 00:02:51,750
let's just console log holes. Now if I
were to run "randHole()" and pass our

36
00:02:51,750 --> 00:02:57,160
"holes" variable, we're going to get six,
why? Because holes is a node list that

37
00:02:57,160 --> 00:03:03,490
contains all six of our holes. Okay, good.
So we need to find a random index between

38
00:03:03,490 --> 00:03:07,907
zero and five which is going to give us
that one, so we say "const idx =

39
00:03:07,907 --> 00:03:19,992
Math.floor(Math.random() * holes.length;
const hole = holes[idx];" why?

40
00:03:19,992 --> 00:03:23,113
Because that's going to be like hole
zero, one, two, three, four,

41
00:03:23,113 --> 00:03:28,008
all the way up till five. So idx, then
let's just console log the hole itself.

42
00:03:28,008 --> 00:03:36,640
So now if we run that function by passing
it our holes, this is five.

43
00:03:36,640 --> 00:03:40,510
Oh, five again, that's going to be a
problem for us. One, one,

44
00:03:40,510 --> 00:03:43,380
oh, one again, that's going to be a
problem for us. One again,

45
00:03:43,380 --> 00:03:48,590
what are the chances? I guess one in six.
Hole, three, hole two.

46
00:03:48,590 --> 00:03:53,150
You see how it's giving us a random one.
But the problem that we're running into is

47
00:03:53,150 --> 00:03:57,520
that sometimes we get the same one,
it's a one and six chance,

48
00:03:57,520 --> 00:04:01,990
so it's going to be pretty common, and you
don't want the same mole popping up.

49
00:04:01,990 --> 00:04:05,130
So what we're going to do is we're
going to create a variable up here,

50
00:04:05,130 --> 00:04:10,670
we're going to say "let lastHole;" and
that's just going to create a variable.

51
00:04:10,670 --> 00:04:15,480
And then down here we're going to say, at
the very bottom put a line in between

52
00:04:15,480 --> 00:04:21,150
that, we'll say "lastHole = hole;" and
what this will do is it will save the

53
00:04:21,150 --> 00:04:26,590
reference to what one got popped up last
time this function was called so that in

54
00:04:26,590 --> 00:04:32,950
here what we can do it we'll say, "if(hole
= lastHole)" like if it was the same

55
00:04:32,950 --> 00:04:40,000
one that popped up last time, we'll just
console log "Ah nah that's the same one

56
00:04:40,000 --> 00:04:47,796
bud." And then we'll simply just run this
function "randomHole()" again by passing

57
00:04:47,890 --> 00:04:53,110
"holes." Now this function is just console
logging but that's not really what we want

58
00:04:53,110 --> 00:04:57,740
because we can't get the reference to the
DOM node if we just consolel log it.

59
00:04:57,740 --> 00:05:03,100
So what we need to do here is return the
hole which is what we have,

60
00:05:03,100 --> 00:05:08,420
and then up here if it was the same one
we'll just return that function itself

61
00:05:08,420 --> 00:05:12,680
which will in turn get called. So you've
got some recursion going on here returning

62
00:05:12,680 --> 00:05:18,000
the hole. Now if we rerun that we should
never get the same one twice in a row.

63
00:05:18,000 --> 00:05:21,770
So, oh, we've got two things going on
here, why do we? Oh, because we are

64
00:05:21,770 --> 00:05:24,630
running it and we're console logging
it, and that's...so this one,

65
00:05:24,630 --> 00:05:27,490
this little thing is saying it's returned
and we're console logging,

66
00:05:27,490 --> 00:05:32,370
so we can take that console log out and
run it, we have one, two,

67
00:05:32,370 --> 00:05:37,540
three, two, six, three. There we go, never
getting the same one,

68
00:05:37,540 --> 00:05:40,980
every now and then we're getting,
"now that's a same one, bud." Why?

69
00:05:40,980 --> 00:05:44,740
Because it's, it is, in this case it was
one and then it found one again,

70
00:05:44,740 --> 00:05:49,190
but rather than returning it, it just
returned the function which will call

71
00:05:49,190 --> 00:05:53,340
itself again. If you call that a few more
times you might get a chance where it will

72
00:05:53,340 --> 00:05:58,830
run it more than once. Aha, there we go,
see, it ran it once, it had one,

73
00:05:58,830 --> 00:06:03,840
ran it again and got one, ran it again and
got one, and then ran it again and got

74
00:06:03,840 --> 00:06:06,820
three. So we've got them running now.
So we've got a random time,

75
00:06:06,820 --> 00:06:10,780
we got a random hole, maybe we should
rename this to "randomTime",

76
00:06:10,780 --> 00:06:16,390
keep that consistent, random and
"randomHole." Next what we need to do is

77
00:06:16,390 --> 00:06:22,330
actually get the moles popping up. So
we'll go here and we'll make a function

78
00:06:22,330 --> 00:06:26,290
called "peep()" which is, there're going
to go hoop, they're going to pop up from

79
00:06:26,290 --> 00:06:30,600
their holes. And we will get some time,
which is a random time,

80
00:06:30,600 --> 00:06:36,540
it's going to be between 200 miliseconds
and one second, and we're going to get a

81
00:06:36,540 --> 00:06:44,190
random hole which should give us
"randomHole()" we pass it "holes." So now

82
00:06:44,190 --> 00:06:53,030
we just console log time and hole see what
we got here. Now when I just run "peep" we

83
00:06:53,030 --> 00:07:01,660
get 450 milliseconds, hole5 should pop up,
hole4 should pop up for 821 milliseconds,

84
00:07:01,660 --> 00:07:06,740
hole3 should be just under one second. So
you see how we're getting a random hole

85
00:07:06,740 --> 00:07:11,900
and a random amount of time? So what we'll
do here is we'll take that hole,

86
00:07:11,900 --> 00:07:21,970
we'll add a class to it of "up" and that
is going to trigger our CSS to be "top:0;"

87
00:07:21,970 --> 00:07:25,910
and that's just going to animate itself in
because by default I have put them

88
00:07:25,910 --> 00:07:32,380
"top:100%;" and I put a transition
of 0.4 seconds to pop up on it.

89
00:07:32,380 --> 00:07:39,990
So there we go, let's try this here.
Hey, there he is. I'll do it again,

90
00:07:39,990 --> 00:07:44,520
hey, and again, and again, and again, and
again, and you see that they are all

91
00:07:44,520 --> 00:07:49,880
slowly popping up. However, we
don't...they don't go away, and what we

92
00:07:49,880 --> 00:07:55,670
need to do now is after this random amount
of time we need to remove the class of

93
00:07:55,670 --> 00:08:02,760
"up" from this random hole. So
"setTimeout()" which is after how many

94
00:08:02,760 --> 00:08:10,140
seconds time? And when that happens we're
going to take our hole and we're going to

95
00:08:10,140 --> 00:08:17,953
remove the class of "up." No, not remove
class, just remove...removeClass is

96
00:08:17,953 --> 00:08:22,860
jQuery. So here we go, and I will say peep
and then it goes down,

97
00:08:22,860 --> 00:08:27,990
peep again and then it goes down, peep
again, wohoo! Having some fun here,

98
00:08:27,990 --> 00:08:36,480
awesome. Then, what we need to do is
unless the game is over we just need to

99
00:08:36,480 --> 00:08:40,890
run it again, when it's done we'll run
"peep()." So if you were to kick off

100
00:08:40,890 --> 00:08:48,170
peep like that it's just going to run
indefinitely because there's no way to

101
00:08:48,170 --> 00:08:53,550
actually stop that. So what we'll do here
is we'll go up to our top,

102
00:08:53,550 --> 00:08:59,530
and we'll create a variable called
"timeUp" and we'll set that to "false,"

103
00:08:59,530 --> 00:09:05,800
and we'll go down here and we'll say if
the time is not up then we'll run

104
00:09:05,800 --> 00:09:13,420
"peep()." So if there is the variable
"timeUp" is ever set to "true" then it

105
00:09:13,420 --> 00:09:18,130
will stop. So here we go, we'll run
"peep()", it's going to run forever but

106
00:09:18,130 --> 00:09:22,820
then we're going to take this "timeUp"
variable, it's set to "false," we can set

107
00:09:22,820 --> 00:09:28,790
it to "true," and it never starts again
because it just...well,

108
00:09:28,790 --> 00:09:33,400
"peep()" will call itself and then it'll
call itself for the last time because this

109
00:09:33,400 --> 00:09:40,460
will not run. Okay, that makes sense so
far. Then what we need to do is make a

110
00:09:40,460 --> 00:09:44,937
function called "startGame." So we'll say
"function startGame()." And the first

111
00:09:44,937 --> 00:09:48,570
thing we need to do is just reset the
scoreboard here, just in case we're

112
00:09:48,570 --> 00:09:56,104
playing again. So we'll say
"scoreboard.textContent = 0;" then we'll

113
00:09:56,104 --> 00:10:00,816
say "timeUp = false;" again we set that on
page load I know, but if you were to

114
00:10:00,816 --> 00:10:04,920
run "startGame()" again like you want to
play twice then you could do that.

115
00:10:04,920 --> 00:10:09,860
Then we want to kick off "peep()" there
which we'll run it, so let's see here,

116
00:10:09,860 --> 00:10:16,920
startGame(), so they're running like
crazy. But what we also want to do is

117
00:10:16,920 --> 00:10:21,800
after 10 seconds we want to set that
variable that we time up,

118
00:10:21,800 --> 00:10:28,820
we want to set it to true. So
"setTimeout()" after that happens we'll

119
00:10:28,820 --> 00:10:37,420
say "timeUp = true" and that will run
after 10 seconds, 10,000 milliseconds.

120
00:10:37,420 --> 00:10:42,170
Well, let's do it after two seconds now
just so we can see if it works.

121
00:10:42,170 --> 00:10:49,300
So we'll run it, two seconds has
elapsed and no longer is running.

122
00:10:49,300 --> 00:10:53,410
Good, so we'll set that back to 10
seconds. So we've got our "startGame(),"

123
00:10:53,410 --> 00:11:00,000
we've got our "peep()" and we can make a
button now that when clicked we can maybe

124
00:11:00,000 --> 00:11:07,550
put a button right here that says
"onClick="startGame()"" there's "Start!"

125
00:11:07,550 --> 00:11:11,480
and then when you click it it will start
playing the game for you.

126
00:11:11,480 --> 00:11:16,020
Wohoo! The last piece that we need
is when you click on a mole,

127
00:11:16,020 --> 00:11:21,030
we need to bonk them on the head. So we
are going to make a function called "bonk"

128
00:11:21,030 --> 00:11:24,770
that's going to take in the event, it'll
just console log the event.

129
00:11:24,770 --> 00:11:31,740
Then we'll take all of our moles and we'll
listen for a click on each of the moles,

130
00:11:31,740 --> 00:11:39,270
then we'll run "bonk." Bonk, like that. So
now we have to get a little bit crafty

131
00:11:39,270 --> 00:11:44,780
with our clicking. So, start it, click.
Oh, I got the first one.

132
00:11:44,780 --> 00:11:50,040
All right, let's take a look at this.
"MouseEvent", all kinds of information in

133
00:11:50,040 --> 00:11:53,230
here. The first thing I want you to do is,
you might say like,

134
00:11:53,230 --> 00:11:58,830
"Oh, Wes, but I can fake a click with
JavaScript," good matches like do that

135
00:11:58,830 --> 00:12:04,170
and win the entire game. Well, on all of
your events you have this thing called

136
00:12:04,170 --> 00:12:10,880
"isTrusted" and it will say "true." If you
fake clicking something with JavaScript

137
00:12:10,880 --> 00:12:15,060
that's going to be false because you can
simulate a click which is handy in some

138
00:12:15,060 --> 00:12:19,860
cases, but we need it to be true that this
actually came from the user's mouse input.

139
00:12:19,860 --> 00:12:25,200
So the first thing we're going to do is
we're going to say "if(!e.isTrusted)

140
00:12:25,200 --> 00:12:31,200
return;" and that will...we'll just say
"cheater!" So someone's

141
00:12:31,200 --> 00:12:36,830
trying to fake the click without their
mouse. Okay, good. Then what we want to do

142
00:12:36,830 --> 00:12:41,950
here is when someone clicks something
we've got to give them some sort of score.

143
00:12:41,950 --> 00:12:49,140
So let's go up to the top here and we'll
say, "let score = 0" and when we start the

144
00:12:49,140 --> 00:12:55,700
game we'll set score to zero as well just
so that if we restart it we can do that.

145
00:12:55,700 --> 00:13:01,290
And then we'll go down here and we'll
simply say "score++;" and we will move

146
00:13:01,290 --> 00:13:06,400
that little guy down, so
"this.classList.remove('up');" because if

147
00:13:06,400 --> 00:13:11,240
you smack them they should move down even
if they have like a second or so left on

148
00:13:11,240 --> 00:13:14,910
the clock. And then we take our
"scoreBoard" which have we selected that?

149
00:13:14,910 --> 00:13:20,424
Yes, yes we have "document.querySelctor"
and we'll set the text content to be

150
00:13:20,424 --> 00:13:26,280
[inaudible]. I got eight, then
you click start, it'll run again and you

151
00:13:26,280 --> 00:13:31,630
can keep playing with all of your values
there. So that is our Whack-a-mole game,

152
00:13:31,630 --> 00:13:34,790
there's a lot more you could do. First of
all what would be really be cool is if you

153
00:13:34,790 --> 00:13:39,440
had like an all time scoreboard and you
were to save that in local storage so if

154
00:13:39,440 --> 00:13:43,580
someone were to come back then you
could reload the highest score,

155
00:13:43,580 --> 00:13:47,630
and you save them in local storage. It
would also be cool if you had like levels,

156
00:13:47,630 --> 00:13:53,820
like this is like a pretty clickable, but
if you were to say like expert level,

157
00:13:53,820 --> 00:14:00,000
and then you were to change this random
time to like between 50 milliseconds and

158
00:14:00,000 --> 00:14:04,060
300 milliseconds and then it'll be like
super hard like woo, woo,

159
00:14:04,060 --> 00:14:07,250
woo, woo, woo. Like some people would
be really good at that, not me,

160
00:14:07,250 --> 00:14:12,940
but oh I got one, sweet. So you could do
expert mode and you can just create extra

161
00:14:12,940 --> 00:14:16,420
all kinds of different controls up here
along with the dashboard and I would just

162
00:14:16,420 --> 00:14:22,680
love to see where you take this one.
Hopefully you enjoyed that and I won't see

163
00:14:22,680 --> 00:14:26,190
you tomorrow because that is it. Hopefully
you enjoyed it and I'll have a little bit

164
00:14:26,190 --> 00:14:29,350
of an outro video for you as well.
Thanks a lot.

165
00:14:29,350 --> 00:14:32,650
♪ [music] ♪

166
00:14:34,000 --> 00:14:35,000
.
