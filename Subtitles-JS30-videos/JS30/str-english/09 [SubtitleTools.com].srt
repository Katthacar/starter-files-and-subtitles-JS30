1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:00,395 --> 00:00:03,900
♪ [music] ♪

3
00:00:08,951 --> 00:00:13,030
This is a quick video on some
dev tools and console tricks.

4
00:00:13,030 --> 00:00:16,610
Chances are you know most of these
already, but I hope that you just learn

5
00:00:16,610 --> 00:00:20,510
like one or two little nuggets from
watching this quick video.

6
00:00:20,510 --> 00:00:23,850
So what we've got here is I've got a
paragraph tag, when you click it,

7
00:00:23,850 --> 00:00:27,430
it's going to run a function called
"makeGreen". This function here.

8
00:00:27,430 --> 00:00:31,270
And I've just done that inline for
simplicity's sake. I could have added

9
00:00:31,270 --> 00:00:34,370
event listener, there's no difference
there. And when I run it,

10
00:00:34,370 --> 00:00:38,210
it will just take the first paragraph on
the page and make it green and up the

11
00:00:38,210 --> 00:00:42,400
size, right? So that's something that
happens to people, where they ask me,

12
00:00:42,400 --> 00:00:47,102
"Hey, I have some JavaScript running on
the page but I don't know what is causing

13
00:00:47,102 --> 00:00:50,016
it. I don't know what is actually
changing it. I know it's JavaScript,

14
00:00:50,016 --> 00:00:55,020
but I don't know where the JavaScript that
is changing that is running." So what you

15
00:00:55,020 --> 00:01:01,060
can do it you can inspect it, find it in
your DOM here, break on,

16
00:01:01,060 --> 00:01:04,550
attribute modifications. There's some
other ones here, like when you remove

17
00:01:04,550 --> 00:01:09,114
a child or you were to change one of the
children's texts or attributes or

18
00:01:09,114 --> 00:01:13,142
something like that. We want this one,
attribute modification. Now, when you

19
00:01:13,142 --> 00:01:19,160
click it, it's going to pop a debugger
command in. It's a break point for us

20
00:01:19,160 --> 00:01:25,000
here, and it will then pause. Exactly
where it paused, it will tell us what the

21
00:01:25,000 --> 00:01:29,460
paragraph is, and it will show us the line
of code that is causing that attribute.

22
00:01:29,460 --> 00:01:36,300
I can pause it and go through, and we're
done. So we can take that off just by

23
00:01:36,300 --> 00:01:41,560
going back to our elements panel,
and taking that off.

24
00:01:41,560 --> 00:01:45,270
Next up, we have a whole bunch of
console. things, and you probably know

25
00:01:45,270 --> 00:01:50,860
about console.log, like, hello, which
will give you, obviously, you've seen this

26
00:01:50,860 --> 00:01:55,010
a million times, will log it. You can
also interpolate values into it,

27
00:01:55,010 --> 00:02:01,130
so console.log, Hello I am a %s string!
And then whatever you pass it in

28
00:02:01,130 --> 00:02:10,917
the other ones, you may have done another
language like PHP in the past where it

29
00:02:10,917 --> 00:02:15,514
does this for you, and that will
interpolate whatever you have passed as

30
00:02:15,514 --> 00:02:20,322
the second one into the first one. Now, I
don't use that all that much anymore now

31
00:02:20,322 --> 00:02:30,364
that we have ES6 back-ticks, I much prefer
to do, console.log('Hello I am $')

32
00:02:30,364 --> 00:02:33,580
but it's totally up to you,
which one you would like here.

33
00:02:33,580 --> 00:02:37,156
We can also style our text with %c.

34
00:02:37,156 --> 00:02:43,785
So, console.log('I am some great text')

35
00:02:43,785 --> 00:02:50,806
And if we put a %c in front of there, and
on the second one, we do things like

36
00:02:50,806 --> 00:03:00,250
font-size, and you can apply any font CSS
to it, 50px. Whoa! I am some great text.

37
00:03:00,250 --> 00:03:07,756
We can also do things like background:red.
Whoa! You can do things like

38
00:03:07,756 --> 00:03:18,902
text-shadow: 10px 10px 0 blue.
You get the point here.

39
00:03:18,902 --> 00:03:22,820
You can do some pretty fun stuff with it.
So you do %c in front of the thing that

40
00:03:22,820 --> 00:03:26,510
you want to style, and then the second
argument that you pass to console will be

41
00:03:26,510 --> 00:03:29,773
interpolated right into there.
I'm going to comment that out

42
00:03:29,773 --> 00:03:30,818
because it's obnoxious.

43
00:03:30,818 --> 00:03:37,600
We have console.warn, which will say,
"OH NOOO" And that will give us a warning,

44
00:03:37,600 --> 00:03:41,240
and will tell us the stack trace as to
where it got called. We have

45
00:03:41,240 --> 00:03:46,027
console.error which will throw,
well, sorry, it won't throw an error.

46
00:03:46,027 --> 00:03:51,190
It will just display an error in the
console. And again, that will also give

47
00:03:51,190 --> 00:03:55,210
you a stack trace as to where that was. If
we had a couple functions calling to get

48
00:03:55,210 --> 00:03:57,955
to that point, it would give you the
entire stack trace there.

49
00:03:57,955 --> 00:04:01,960
We have console.info which
will give you a little bit of info,

50
00:04:01,960 --> 00:04:08,056
like, I had a fun...
Hold on, let me find you a fun fact, here.

51
00:04:08,056 --> 00:04:11,341
Crocodiles eat three to four
people per year. That's a fun fact.

52
00:04:11,341 --> 00:04:14,743
It should be console.funfact, but
it's info, and it will give you the little

53
00:04:14,743 --> 00:04:16,949
"i" info one.

54
00:04:16,949 --> 00:04:24,790
You can use console.assert to check if
things are true. So if one is equal to one

55
00:04:24,790 --> 00:04:31,750
you will say "That is wrong!" And if
you run this, you don't see anything.

56
00:04:31,750 --> 00:04:36,630
Why? Because that is true. Console.assert
will only fire if something is wrong.

57
00:04:36,630 --> 00:04:40,750
And then it will tell you, "Assertion
failed. That is wrong." If I were to grab

58
00:04:40,750 --> 00:04:48,471
the paragraph on the page, so,
const p=document.querySelector,

59
00:04:48,471 --> 00:04:59,090
"paragraph', and then you could assert
that "p.classlist.contains(ouch)" and you

60
00:04:59,090 --> 00:05:07,210
could tell the user, "That is wrong!" And
if the classlist does not contain "ouch"

61
00:05:07,210 --> 00:05:11,180
it will tell you that is wrong or you must
supply class...you get the point here.

62
00:05:11,180 --> 00:05:17,060
You can test for something and if it is
false, it will throw this error into your

63
00:05:17,060 --> 00:05:21,130
console here. And if it is true, nothing
will happen. So you don't have to have an

64
00:05:21,130 --> 00:05:22,900
"if" statement in here.

65
00:05:22,900 --> 00:05:29,020
We have "console.clear" which will clear
your console. If you really want to mess

66
00:05:29,020 --> 00:05:32,760
with a developer you could just put that
at the bottom of your javascript

67
00:05:32,760 --> 00:05:36,817
file. Because that's really frustrating.
Viewing DOM elements. So I've got this

68
00:05:36,817 --> 00:05:40,597
paragraph here, and if I were to
"console.log" that paragraph that we

69
00:05:40,597 --> 00:05:43,450
selected earlier, you see this,
the actual paragraph.

70
00:05:43,450 --> 00:05:47,433
But how do you know what
are the available methods

71
00:05:47,433 --> 00:05:50,962
and all the properties on that
element? Well if you want to use

72
00:05:50,962 --> 00:05:54,956
"console.dir", that's going to give you a
dropdown. So that's the element

73
00:05:54,956 --> 00:05:59,890
"console.log". "Console.dir" is going to
allow you to open it up and take a look at

74
00:05:59,890 --> 00:06:05,530
the class list. Whoa! Open that right up.
Child knows the children,

75
00:06:05,530 --> 00:06:09,970
the dataset on that specific one, the
style, all the different properties and

76
00:06:09,970 --> 00:06:12,680
methods that live. If you want to see all
the different methods, you crack open the

77
00:06:12,680 --> 00:06:17,310
prototype. All of the stuff that lives on
that element, "console.dir" will show you,

78
00:06:17,310 --> 00:06:22,220
whereas "console.log" is going to show you
the actual element itself.

79
00:06:22,220 --> 00:06:25,510
Grouping things together. This one is
actually pretty cool. I'm just going to

80
00:06:25,510 --> 00:06:33,281
run another "console.clear" in here. If I
were to take this "dogs" array that I've

81
00:06:33,281 --> 00:06:42,730
got up at the top here and loop over each
one. So "console.dogs.forEach", "dog",

82
00:06:42,730 --> 00:06:47,080
and then for each of these I'm just going
to do "console.log(`This is

83
00:06:47,080 --> 00:06:52,740
$`)" and "This is Snickers,",
"This is Hugo." But what if I have some

84
00:06:52,740 --> 00:07:02,840
other information? Age. I want to have
like another one, "dog.name" is "dog.age"

85
00:07:02,840 --> 00:07:14,310
years old. Okay, and maybe another one,
"dog.name", "dog.age*7" dog years old.

86
00:07:14,310 --> 00:07:18,060
So this gets a little bit hairy, got a lot
going on here, and imagine you were doing

87
00:07:18,060 --> 00:07:22,230
more stuff than just console logging three
strings. You have a lot of stuff.

88
00:07:22,230 --> 00:07:30,550
So what we can do is we can say
"console.group" and you can start it up

89
00:07:30,550 --> 00:07:36,820
and we'll use the dog's name here,
"dog.name". And when you're done, you say

90
00:07:36,820 --> 00:07:43,810
"console.groupEnd" and then you pass
the same string that you used to define

91
00:07:43,810 --> 00:07:49,000
that group. Now when you open it up,
you've got "Snickers" and "Hugo",

92
00:07:49,000 --> 00:07:53,890
these are the two groups that we've made
by passing it, and you can close,

93
00:07:53,890 --> 00:07:57,930
open, and close them. If you feel like
this is still a little bit messy,

94
00:07:57,930 --> 00:08:02,530
you can switch out "group" with
"groupCollapsed", and by default they will

95
00:08:02,530 --> 00:08:05,540
be collapsed. Which is really nice because
you might not necessarily need that

96
00:08:05,540 --> 00:08:09,510
information, but if you do, you can crack
open the associated one that you're

97
00:08:09,510 --> 00:08:14,240
looking for and see all the info that is
associated for that one.

98
00:08:14,240 --> 00:08:21,880
"Console.count" will count however many
times you use a specific word,

99
00:08:21,880 --> 00:08:27,200
or number, or object, or DOM node, or
anything that you have. So "console.count"

100
00:08:27,200 --> 00:08:32,520
"Wes", I run that a couple of times, it's
going to tell me how many times I have

101
00:08:32,520 --> 00:08:37,124
run it. If I were to take and say "Steve"
in the middle, and then do a couple more

102
00:08:37,124 --> 00:08:42,047
of those, another one down here and a
couple more. So I'm all over the place

103
00:08:42,047 --> 00:08:50,615
here. It's going to just log them in
real time, telling me how many we've

104
00:08:50,615 --> 00:08:52,577
counted at that time.

105
00:08:52,577 --> 00:08:56,740
Finally, we have "Timing". If you want to
see how long something takes,

106
00:08:56,740 --> 00:09:03,910
what you can do is start a timer. So
"console.time", we'll say "fetchingData",

107
00:09:03,910 --> 00:09:17,970
then you could do something that takes
time, like fetch some data from github.

108
00:09:17,970 --> 00:09:23,460
And when you are done, you simply run
"console.timeEnd" and then you pass the

109
00:09:23,460 --> 00:09:29,250
same string that you used to start it. And
you can obviously "console.log" your data

110
00:09:29,250 --> 00:09:35,331
at that time. Then that will tell us,
fetching data took 160 milliseconds,

111
00:09:35,331 --> 00:09:42,178
this time 104 milliseconds, 57, 62, 75,
etc., etc. You can see how long these

112
00:09:42,178 --> 00:09:47,147
things are taking. I know there also is
"performance.now" in the browser,

113
00:09:47,147 --> 00:09:52,011
but this is a nice way just to get a quick
idea of how long your things are taking.

114
00:09:52,011 --> 00:09:55,006
You don't have to have variables
or anything like that.

115
00:09:55,006 --> 00:09:56,736
You just start and stop them.

116
00:09:56,736 --> 00:10:00,335
Finally, there's one last one, which is
"console.table", but I've been showing you

117
00:10:00,335 --> 00:10:03,806
that one in every single video so far.
You probably know about it.

118
00:10:03,806 --> 00:10:09,878
But you can take an array of objects, so
an array which is "dogs" of objects,

119
00:10:09,878 --> 00:10:13,570
which is each dog, and assuming that they
all have the same properties,

120
00:10:13,570 --> 00:10:17,982
like "name" and "age", it will display
them in a nice table for you,

121
00:10:17,982 --> 00:10:21,102
like that. It gets a little bit hairy
when you have a few other,

122
00:10:21,102 --> 00:10:25,026
but you can always drag and drop the
things, different parts that you want.

123
00:10:25,026 --> 00:10:29,868
That's it. Hopefully you learned
a thing or two. I will see you tomorrow!

124
00:10:29,868 --> 00:10:32,841
♪ [music] ♪
