1
00:00:00,000 --> 00:00:00,033
Edited at https://subtitletools.com

2
00:00:00,446 --> 00:00:03,520
♪ [music] ♪

3
00:00:12,979 --> 00:00:14,948
In this exercise, we're going to make this

4
00:00:14,948 --> 00:00:20,360
really sweet JavaScript Drum Kit. I'm not
really exactly sure what it is but it's

5
00:00:20,360 --> 00:00:23,870
really fun to play and when you hit the
corresponding key on your keyboard,

6
00:00:23,870 --> 00:00:26,770
it's going to do two things. First of all,
it's going to play the sound that's

7
00:00:26,770 --> 00:00:30,980
associated with that key and second of
all, it's going to do this short little

8
00:00:30,980 --> 00:00:36,690
animation where it pops the button up to
be a little bit bigger than we want.

9
00:00:36,690 --> 00:00:42,090
And then also, it will apply that yellow
border and that little background there.

10
00:00:42,090 --> 00:00:45,290
It's really, really subtle and I'll show
you how that's working here.

11
00:00:45,290 --> 00:00:49,070
We inspect on this kick one right here.
You see we have this data dash key and

12
00:00:49,070 --> 00:00:53,190
we'll look that in just a second, but when
I press it, you can't even see it adding

13
00:00:53,190 --> 00:00:57,140
because it's going so quickly. But what
that's doing is it's adding a class of

14
00:00:57,140 --> 00:01:02,807
playing to that element which will then
kick in the CSS if I open up today's

15
00:01:02,807 --> 00:01:07,458
exercise and we'll look at stalled at CSS.
You see we have class of playing that's

16
00:01:07,458 --> 00:01:12,070
going to scale it up by 1.1 in our CSS.
It's going to change the border color.

17
00:01:12,070 --> 00:01:15,680
It's going to change the back shadow. Now
because if we look at our regular key

18
00:01:15,680 --> 00:01:21,190
here, you see that we have a transition
that is 0.07 seconds long really,

19
00:01:21,190 --> 00:01:26,260
really quick. And that's going to scale it
up and change the background color behind

20
00:01:26,260 --> 00:01:30,910
it. So that's really the two things that
we have here and if you would like to sort

21
00:01:30,910 --> 00:01:36,200
of go at this on your own, pause the video
here, try to get this up in working.

22
00:01:36,200 --> 00:01:40,010
Otherwise, let's go ahead for the ride and
take a look at what we're working with

23
00:01:40,010 --> 00:01:43,650
here. So we've got a div with class of
keys and inside of that,

24
00:01:43,650 --> 00:01:48,250
we've got a whole bunch of divs with a
class of key. Now, each of these keys here

25
00:01:48,250 --> 00:01:52,490
obviously has like the clap, what sound
it's going to make as well as the key that

26
00:01:52,490 --> 00:01:57,140
you should hit on your keyboard. But the
important thing here is that every key on

27
00:01:57,140 --> 00:02:02,510
your keyboard when you press the up or the
down, when you key up or key down event,

28
00:02:02,510 --> 00:02:07,662
there is going to be something called the
key code that is associated with that key.

29
00:02:07,662 --> 00:02:11,387
Now, I've got a little website here I
whipped up a couple of years ago because I

30
00:02:11,387 --> 00:02:14,853
always find myself searching for it and
it's called keycode.info and when you

31
00:02:14,853 --> 00:02:20,389
press a key on your keyboard like escape
or space or A, it's going to have number

32
00:02:20,389 --> 00:02:24,686
associated with that specific key on your
keyboard and this is the most consistent

33
00:02:25,230 --> 00:02:29,166
way that I found across browser, cross
languages. It's not absolutely perfect

34
00:02:29,166 --> 00:02:35,044
but it gets you most of the way for most
of your standard keys. When you click

35
00:02:35,044 --> 00:02:40,780
or when you hit 65 like when you key up
and we're going to check if that was the A

36
00:02:40,780 --> 00:02:46,623
key then we're going to play the
corresponding audio element that also has

37
00:02:46,623 --> 00:02:50,833
the data-key. Now, what is this data dash
key? If you've never used a data

38
00:02:50,833 --> 00:02:55,922
attributes before, this is not a standard.
You won't find this Googling anything,

39
00:02:55,922 --> 00:03:01,560
anywhere you want. And essentially, data
attributes were brought about in HTML when

40
00:03:01,560 --> 00:03:05,890
people were just making up their own
attributes. We have things like source and

41
00:03:05,890 --> 00:03:10,080
class, and those are standards. And then
people just started making up their own

42
00:03:10,080 --> 00:03:13,000
and the people who made HTML were like,
"whoa, whoa, whoa, chill out,

43
00:03:13,000 --> 00:03:17,360
you can't just start adding shit like for
whatever you want." So we came up with

44
00:03:17,360 --> 00:03:21,880
this idea of data attributes where if you
want to make up something like a key,

45
00:03:21,880 --> 00:03:26,250
you have to put it behind a data-something
So what I'm doing here is I'm

46
00:03:26,250 --> 00:03:34,290
using data attributes to hook up this, the
data key 65 along with the data key audio.

47
00:03:34,290 --> 00:03:37,450
So that when someone hits the key on their
keyboard, we're going to find the audio

48
00:03:37,450 --> 00:03:42,810
element and play it and we're going to
find the key div and we're going to add a

49
00:03:42,810 --> 00:03:47,010
class of playing so it will animate itself
on in. So let's get started,

50
00:03:47,010 --> 00:03:50,940
go over to our script tag here and the
first thing we need to do is just be

51
00:03:50,940 --> 00:03:57,520
focused on listening for a key up event.
Now, the way that we do that is you first

52
00:03:57,520 --> 00:04:00,850
get whatever element that you're
listening for and in our case,

53
00:04:00,850 --> 00:04:03,950
I'm going to listen on the window.
Sometimes, you might want to listen on the

54
00:04:03,950 --> 00:04:08,440
input or a div or a text area or something
like that. And we're going to add an event

55
00:04:08,440 --> 00:04:13,860
listener. The event that we're
listening here is called key down.

56
00:04:13,860 --> 00:04:20,850
And then next, we have a function which
will give us the event and inside of that,

57
00:04:20,850 --> 00:04:25,060
we have nothing. And then I'm going to get
rid of the rest of this stuff here.

58
00:04:25,060 --> 00:04:30,830
So we're going to listen for the key down
event and when that happens,

59
00:04:30,830 --> 00:04:34,360
we're going to run this function which
will give us the event and I'm just going

60
00:04:34,360 --> 00:04:38,820
to console log that event. Open up my
console, now whenever I press one of these

61
00:04:38,820 --> 00:04:43,000
keys on the keyboard, you'll see that we
get this keyboard event, that's what E is.

62
00:04:43,000 --> 00:04:48,664
The event is just the object full of data
describing what happened and it'll tell us

63
00:04:48,664 --> 00:04:53,841
all kinds of info like what key was
actually hit. But the thing we're

64
00:04:53,841 --> 00:04:59,431
concerned with here the key code, which is
the number that is associated with that

65
00:04:59,431 --> 00:05:02,980
key, and that's essentially what all this
website is. When someone hits the key up,

66
00:05:02,980 --> 00:05:07,490
we're just going to display the
corresponding number that you have.

67
00:05:07,490 --> 00:05:13,570
So we go down here, we can log
e.keyCode and see what we've got.

68
00:05:13,570 --> 00:05:16,870
Good, now we've got all these different...
If you hit spacebar, you can get 32.

69
00:05:16,870 --> 00:05:21,843
If you hit escape, you're going to get 27.
Now what we need to do is say,

70
00:05:21,843 --> 00:05:29,386
"is there an audio element on the page
that has a data dash key of 65?" And we're

71
00:05:29,480 --> 00:05:33,130
going to use document.querySelector
because we're only looking for one.

72
00:05:33,130 --> 00:05:36,630
If I was looking for many, I would say
query selector all but in our case it's

73
00:05:36,630 --> 00:05:41,190
just query selector. And we're going to
listen for an audio, we're going to try to

74
00:05:41,190 --> 00:05:46,110
select an audio element but we want to
select it where it has a data - key,

75
00:05:46,110 --> 00:05:49,450
like there's no class on here. And
sometimes I see people say like,

76
00:05:49,450 --> 00:05:56,000
"class=key-65" and they'll split it and
select something with a class of key 65.

77
00:05:56,000 --> 00:06:00,290
That's a bit messy to me. I'd rather just
use its own data attribute here.

78
00:06:00,290 --> 00:06:04,070
So we can use and attribute selector if
you've ever used this in CSS,

79
00:06:04,070 --> 00:06:09,000
works the same in JavaScript. Attribute
selector say something like this,

80
00:06:09,000 --> 00:06:16,260
"data-key=" and normally would say 65,
right? But that is going to be a variable

81
00:06:16,260 --> 00:06:19,200
that lives inside of this event. So what
I'm going to do is I'm going to switch

82
00:06:19,200 --> 00:06:24,820
these to back text and we're going to use
ES6 template strings which is dollar sign

83
00:06:24,820 --> 00:06:32,230
curly brackets say "e.keyCode." Now, we
can console log audio and see if we have

84
00:06:32,230 --> 00:06:36,140
selected an actual audio element. So I'm
going to refresh, I'm going to hit my A

85
00:06:36,140 --> 00:06:42,120
button. No, we got an error,
audio(data-key=65) is not a valid

86
00:06:42,120 --> 00:06:47,720
selector. What did we do here? I think we
need to pop a set of quotes around this

87
00:06:47,720 --> 00:06:54,426
actual key here. Let's see if that works
for us. Hit A. There we go.

88
00:06:54,426 --> 00:07:00,628
So it looks like you do need quotes around
your actual number here. Now when I hit

89
00:07:00,628 --> 00:07:05,380
the key, and hit S, I'm going to
hit D. You see that we are getting the

90
00:07:05,380 --> 00:07:10,010
corresponding audio element for that
specific key. Now sometimes we're going to

91
00:07:10,010 --> 00:07:14,680
hit, I'm going ahead and hit Q. We get
null. Why do we get null?

92
00:07:14,680 --> 00:07:19,750
That's because there is no audio element
associated with 81. So right away,

93
00:07:19,750 --> 00:07:24,140
right there we can do is we can say if
there is no audio, if bang audio,

94
00:07:24,140 --> 00:07:30,900
then we are just going to return. And that
would just stop the function from running

95
00:07:30,900 --> 00:07:35,920
altogether. Okay, good, and that would
just stop it. Now what we can do since we

96
00:07:35,920 --> 00:07:46,820
have this audio element, we can
play it. Let's try that. S, D, F.

97
00:07:46,820 --> 00:07:52,390
Now it kind of works but here, hit F
over and over again, F, F, F, F.

98
00:07:52,390 --> 00:07:59,610
I'm hitting it multiple times, but it
really only plays once every so often.

99
00:07:59,610 --> 00:08:04,170
And that's because the open hat F, it
plays and it takes like maybe two or three

100
00:08:04,170 --> 00:08:09,430
seconds to actually get to the end. And if
you call .play on an audio element

101
00:08:09,430 --> 00:08:13,000
that is already playing, it won't play it
again because it's like,

102
00:08:13,000 --> 00:08:17,450
"oh, why would I do that? I'm clearly
already playing with that." So what we

103
00:08:17,450 --> 00:08:21,770
want to do before we do that is sort of
rewind it to the start of the element so

104
00:08:21,770 --> 00:08:24,570
that if you hit it in succession over and
over again and over again,

105
00:08:24,570 --> 00:08:30,300
it will just rewind it to the start. So
let's say "audio.currenTime=0." Now this

106
00:08:30,300 --> 00:08:38,310
is going to rewind to the start. And now
if I just hammer on F,

107
00:08:38,310 --> 00:08:43,860
you see we get it over and over again,
AAAA, SSS, DDD, FFF.

108
00:08:43,860 --> 00:08:46,880
Good, playing over and over again. I'm
going to try some of the other keys on the

109
00:08:46,880 --> 00:08:50,670
keyboard, nothing happens because we're
doing this check if there's no audio

110
00:08:50,670 --> 00:08:56,100
element. Now, what we also need to do is
select the corresponding key that is with

111
00:08:56,100 --> 00:08:59,340
it because we want to add that little
animation that we have here.

112
00:08:59,340 --> 00:09:04,820
So let's say "const key=" and I going to
take this entire thing and switch it out

113
00:09:04,820 --> 00:09:09,930
with a dot key. So instead of selecting an
audio element with the data dash key,

114
00:09:09,930 --> 00:09:14,560
we could select a div or in our case,
something with the class of key but also

115
00:09:14,560 --> 00:09:20,740
the data dash key. Now, let's go to the
bottom here and console log the actual key

116
00:09:20,740 --> 00:09:29,170
element. Good, look these are the
corresponding key elements that we have,

117
00:09:29,170 --> 00:09:34,440
and how do we get them to do that
cool little animation? Well,

118
00:09:34,440 --> 00:09:39,460
again, if we go back to our style.CSS
we've got here, you see that I've already

119
00:09:39,460 --> 00:09:44,790
styled the CSS and most of this does not
matter except the one line that we have

120
00:09:44,790 --> 00:09:51,960
here that is transition all 0.07 seconds.
And when you add a class of playing to

121
00:09:51,960 --> 00:09:56,140
that, we're going to scale it up, we're
going to change the border color and we're

122
00:09:56,140 --> 00:10:02,030
going to change the box shadow color. So,
what we can do is we'll say,

123
00:10:02,030 --> 00:10:08,500
"key.classList.add" and then we'll say
"playing." If you've never used this,

124
00:10:08,500 --> 00:10:12,229
if you're just used to using jQuery,
that's the same thing as saying like

125
00:10:12,229 --> 00:10:18,179
"key.addClass(playing)." Except we're not
using jQuery here, we're just using

126
00:10:18,179 --> 00:10:21,460
Vanilla JavaScript, so that's the way
that you do it in Vanilla JavaScript.

127
00:10:21,460 --> 00:10:26,195
You call .classList and then add.
Similarly, we also have .remove and we

128
00:10:26,195 --> 00:10:31,270
have .toggle which will allow you to add
and remove the different classes that

129
00:10:31,270 --> 00:10:40,150
you want. So let's see how that works
S, D, F. You see how it's adding them?

130
00:10:40,150 --> 00:10:45,410
If you want to see how it works a little
bit slower, what you can do is go into

131
00:10:45,410 --> 00:10:51,220
your CSS and change this, maybe let's make
the scale two and let's make the

132
00:10:51,220 --> 00:11:01,815
transition 1.07 seconds. Now when I hit D,
you see over a second, F, G.

133
00:11:01,815 --> 00:11:06,460
That's what's happening but because
we did it in such a short time span,

134
00:11:06,460 --> 00:11:13,070
0.07 seconds, it just does it really,
really quickly and also,

135
00:11:13,070 --> 00:11:22,160
we don't want to scale it up exactly that
much. Now, that works but why isn't it

136
00:11:22,160 --> 00:11:29,210
going away? That's because we are adding
the class but we have not yet removed the

137
00:11:29,210 --> 00:11:33,470
class. You might think, "oh, that's no
problem, we'll do like a set timeout here,

138
00:11:33,470 --> 00:11:42,890
we'll run a function here and after 0.07
seconds." Well, that's okay but what tends

139
00:11:42,890 --> 00:11:49,160
to happen if you have a timeout here as
well as you have a timeout in your CSS

140
00:11:49,160 --> 00:11:53,910
JavaScript which is right here, they start
to get out of sync because maybe like a

141
00:11:53,910 --> 00:11:57,630
designer comes around like, "its not quite
right, let's change that to like 0.9,

142
00:11:57,630 --> 00:12:02,080
that feels a little bit better to me." And
then you have to go into the JavaScript to

143
00:12:02,080 --> 00:12:07,860
make that that lines up as well. So rather
than like just setting a timer to do it,

144
00:12:07,860 --> 00:12:17,350
what we can do is use a transition end
event that will fire when the thing has

145
00:12:17,350 --> 00:12:21,540
stopped animating itself on in. Now, what
is the transition end event?

146
00:12:21,540 --> 00:12:26,590
Well, let's take it back a second, what is
a click event? The click event is when you

147
00:12:26,590 --> 00:12:30,800
click something and it will fire off the
event and say, "somebody clicked me." We

148
00:12:30,800 --> 00:12:36,080
also have events in JavaScript that will
say, "I didn't get clicked but I was

149
00:12:36,080 --> 00:12:42,450
transitioned, I transition myself from
scale 1 border black to scale 1.1 border

150
00:12:42,450 --> 00:12:47,910
yellow." That's what we're going from here
which is the border black to here which

151
00:12:47,910 --> 00:12:55,170
the border is that specific yellow. So
what we can do is we can listen on each

152
00:12:55,170 --> 00:12:59,630
key for when the transition end event
happens. So let's do that.

153
00:12:59,630 --> 00:13:06,520
First, let's go down here and we'll say
"const key=" now I need to select every

154
00:13:06,520 --> 00:13:09,820
single key on the page because we want to
listen for it on each one.

155
00:13:09,820 --> 00:13:15,580
So let's say "document.querySelector" and
we want query selector all, and we'll say

156
00:13:15,580 --> 00:13:19,500
dot key. Now let's just see if I were to
run that in my console here,

157
00:13:19,500 --> 00:13:24,590
let's see what that gives us. That gives
us an array of every single element that

158
00:13:24,590 --> 00:13:28,740
is matched. Okay, good, then what we
want to do is we want to listen for

159
00:13:28,740 --> 00:13:35,530
an event called transition end on each
one. So it's like "keys.forEach" and we're

160
00:13:35,530 --> 00:13:39,670
going to get each key. If you're
wondering why do we have to this,

161
00:13:39,670 --> 00:13:44,890
like why can't we just do
"keys.addEventListener" and listen for

162
00:13:44,890 --> 00:13:50,410
transition end? And that's because if
you're used jQuery or anything like that,

163
00:13:50,410 --> 00:13:56,560
the problem is when you have an array
of elements, you cannot listen on all of

164
00:13:56,560 --> 00:14:01,940
them. You must explicitly loop over every
singly element and attach an event

165
00:14:01,940 --> 00:14:05,636
listener. So, the way that I like to that
seems to be the simplest way for me is

166
00:14:05,636 --> 00:14:09,451
you can say key. We use a little arrow
function here, if you've followed along in

167
00:14:09,451 --> 00:14:15,572
my ES6 series, it's "key.addEventListener"
and then the listener that we're listening

168
00:14:15,572 --> 00:14:20,860
for is transition end, and when that ends,
we are going to run a function called

169
00:14:20,860 --> 00:14:27,771
"remove transition." Now we have to make
that. Now, let's just take a quick look

170
00:14:27,771 --> 00:14:32,956
at here. So each key gets an event
listener added to it which is transition

171
00:14:32,956 --> 00:14:38,760
end. And then when a transition is ending,
we will remove it. Now we need to actually

172
00:14:38,760 --> 00:14:45,210
make that function here. So let's say
"function removeTransition" and that let's

173
00:14:45,210 --> 00:14:53,600
give us the event. Inside of that, we'll
just console log the event just to see

174
00:14:53,600 --> 00:14:59,792
what we're working with here. So, I'm
going to press A. Whoa, what happened

175
00:14:59,792 --> 00:15:05,520
here? Okay, so we have one, two, three,
four, five, six transition end events for

176
00:15:05,520 --> 00:15:09,910
that one little fade in where it got a
little bit bigger. And that's because a

177
00:15:09,910 --> 00:15:13,060
whole bunch of things transitioned here.
The border right color transition,

178
00:15:13,060 --> 00:15:20,210
all of the borders have transitioned. The
box shadow which is that little yellow

179
00:15:20,210 --> 00:15:25,430
glow has transitioned. And then also,
the transform has finished.

180
00:15:25,430 --> 00:15:29,530
Now, we don't really care about all of
these. We really just want to it when one

181
00:15:29,530 --> 00:15:34,540
thing is over, generally the longest one.
So, let's pick the transform.

182
00:15:34,540 --> 00:15:40,630
So, let's say "if E." and what was the
event we were looking for here

183
00:15:40,630 --> 00:15:48,530
"event.propertyName." If it doesn't equal
transition then we will return.

184
00:15:48,530 --> 00:15:54,050
And now we'll say "skip it if it's not a
transform." Transform,

185
00:15:54,050 --> 00:15:58,320
not transition, I always mess them up.
Thank you for yelling at me through the

186
00:15:58,320 --> 00:16:03,500
computer screen. Now, what's up next?
Let's just console log e.propertyName.

187
00:16:03,500 --> 00:16:09,920
Let's see what we're working with here. So
we got this function that will run when a

188
00:16:09,920 --> 00:16:18,590
transition has ended. You see what's
happening? It's console logging the word

189
00:16:18,590 --> 00:16:23,650
transform because that is the property
that is being ended. Now,

190
00:16:23,650 --> 00:16:28,210
that does it really quickly, but if I were
again to change this transform to 2.07

191
00:16:28,210 --> 00:16:36,860
seconds and press A, one, two there we go.
It took seconds and then that's when it

192
00:16:36,860 --> 00:16:39,960
ended. And coincidentally, why
coincidentally? That's why we want to do

193
00:16:39,960 --> 00:16:45,710
it. When that happens, when it's done
moving itself in, we just want to reverse

194
00:16:45,710 --> 00:16:50,540
everything that we know about that. So we
can head to our remove transition function

195
00:16:50,540 --> 00:16:54,220
here and first of all, we'll save this.
Now what is this going to be equal to?

196
00:16:54,220 --> 00:16:58,440
Well, if you are having a hard time
understanding what this is equal to

197
00:16:58,440 --> 00:17:02,956
a really cheap and dirty way to understand
what this is equal to, well first you just

198
00:17:02,956 --> 00:17:07,600
console log and see what it is.
That's a nice a way to find it out.

199
00:17:07,600 --> 00:17:13,840
So, let me press A and then after two
seconds, I still have it on two seconds.

200
00:17:13,840 --> 00:17:18,670
This is equal to the key, and why is that?
Because this is always equal to the

201
00:17:18,670 --> 00:17:22,410
whatever got called against it. So add
event listener got called,

202
00:17:22,410 --> 00:17:27,090
what got called against it, key.
So this is equal to the actual key.

203
00:17:27,090 --> 00:17:34,260
So this, .classlist.remove we'll remove
the class of playing. Give that a save.

204
00:17:34,260 --> 00:17:37,630
Now it's two seconds so I'm going
to hit it. Two seconds later,

205
00:17:37,630 --> 00:17:42,620
transition end is going to fire which is
going to remove the transition of playing

206
00:17:42,620 --> 00:17:52,570
and it should fade itself out. So, I'm
going to hit D, it's in and it's done

207
00:17:52,570 --> 00:17:59,530
and it'll take the class off. If we
inspect that, watch it right here.

208
00:17:59,530 --> 00:18:03,310
See, it's got a class of playing and then
two seconds later, it will remove it.

209
00:18:03,310 --> 00:18:09,880
Now, if we go to our CSS and change
that back to 0.07 seconds,

210
00:18:09,880 --> 00:18:14,630
it's just nice and quick, nice and quick,
nice and quick for all of those,

211
00:18:14,630 --> 00:18:18,260
it went immediately. And the same thing
happens there if you were to add a class

212
00:18:18,260 --> 00:18:23,110
of playing in div tools. It will still
remove it because the JavaScript is

213
00:18:23,110 --> 00:18:28,380
listening on that element for when you
remove it. One last thing I want to do is

214
00:18:28,380 --> 00:18:34,420
we go into our HTML. I'm never a big fan
of attaching these functions right to the

215
00:18:34,420 --> 00:18:39,590
key down here, so what I want to do is put
these in its own function and it will call

216
00:18:39,590 --> 00:18:48,670
that play sound. Let's say "function
playSound" and put all these logic inside

217
00:18:48,670 --> 00:18:56,860
here and that is going to take in the
event which then bring down my event

218
00:18:56,860 --> 00:19:01,210
listener down to the bottom here and we're
going to say when someone keys down

219
00:19:01,210 --> 00:19:08,054
we're going to play the sound, that should
keep it for us. Still works fine

220
00:19:08,054 --> 00:19:11,427
and that we've got them nice and separate
so that if I ever wanted to play the sound

221
00:19:11,427 --> 00:19:15,986
based off on something else, I totally
could. So that is a basic JavaScript

222
00:19:15,986 --> 00:19:20,681
Drum Kit. Again, the things we learned
about was key events as well as playing

223
00:19:20,681 --> 00:19:25,439
audio as well listening for the transition
end event. Similarly, if you're also

224
00:19:25,439 --> 00:19:29,747
dealing with animations, you can listen
for the animation end event, which works

225
00:19:29,747 --> 00:19:32,765
exactly the same way. Thank you so much
and I'll see you in the next one.

226
00:19:32,863 --> 00:19:36,058
♪ [music] ♪
